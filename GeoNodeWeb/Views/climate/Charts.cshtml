@using GeoNodeWeb.Controllers
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedResources> SharedLocalizer
@{
    ViewData["Title"] = SharedLocalizer["Charts"];
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@await Html.PartialAsync("_StylesTabChart")

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css" />
<link href="~/esnow/lib/rangeSlider/ion.rangeSlider.min.css" rel="stylesheet" />
<script src="~/esnow/lib/rangeSlider/ion.rangeSlider.min.js"></script>
<link rel="stylesheet" href="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/css/ol.css" type="text/css">
<script src="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/build/ol.js"></script>

<style>
    .mapTooltip {
        position: fixed;
        background-color: #fff;
        moz-opacity: 0.70;
        opacity: 0.70;
        filter: alpha(opacity=70);
        border-radius: 10px;
        padding: 10px;
        z-index: 1000;
        max-width: 200px;
        display: none;
        color: #343434;
    }

    .zoomIn, .zoomOut {
        background-color: #fff;
        border: 1px solid #ccc;
        color: #000;
        width: 15px;
        height: 15px;
        line-height: 15px;
        text-align: center;
        border-radius: 3px;
        cursor: pointer;
        position: absolute;
        top: 10px;
        font-weight: bold;
        left: 10px;
        -webkit-user-select: none;
        // For Webkit -khtml-user-select: none;
        -moz-user-select: none;
        // For Mozilla -o-user-select: none;
        user-select: none;
        // Default
    }

    .zoomOut {
        top: 30px;
    }

    .map {
        position: relative;
    }

    .selectLayer {
        position: absolute;
        top: 5%;
        left: 10%;
    }

    .mapYears {
        position: absolute;
        top: 5%;
        right: 5%;
    }

    .ol-popup {
        position: absolute;
        background-color: white;
        -webkit-filter: drop-shadow(0 1px 4px rgba(0,0,0,0.2));
        filter: drop-shadow(0 1px 4px rgba(0,0,0,0.2));
        padding: 15px;
        border-radius: 10px;
        border: 1px solid #cccccc;
        bottom: 12px;
        left: -50px;
        min-width: 200px;
    }

        .ol-popup:after, .ol-popup:before {
            top: 100%;
            border: solid transparent;
            content: " ";
            height: 0;
            width: 0;
            position: absolute;
            pointer-events: none;
        }

        .ol-popup:after {
            border-top-color: white;
            border-width: 10px;
            left: 48px;
            margin-left: -10px;
        }

        .ol-popup:before {
            border-top-color: #cccccc;
            border-width: 11px;
            left: 48px;
            margin-left: -11px;
        }

        .ol-popup p {
            font-size: 12px;
            margin: 0px;
        }

    .ol-popup-closer {
        text-decoration: none;
        position: absolute;
        top: 2px;
        right: 8px;
    }

        .ol-popup-closer:after {
            content: "✖";
        }

    #map1, #map2 {
        position: relative;
    }

    .legend {
        position: absolute;
        z-index: 1;
        width: 50%;
        right: 1%;
        bottom: 2%;
        border: 1px solid #fff;
        box-shadow: 0 3px 15px rgba(0, 0, 0, 0.4), 0 0 5px rgba(0, 0, 0, 0.4);
        background: #3a465d;
    }
</style>
<input id="id" value="@ViewBag.Id" type="hidden" />
<div class="row">
    <nav class="col-md-2 d-none d-md-block bg-light sidebar">
        <fieldset class="scheduler-border">
            <legend class="scheduler-border mt-4"> @SharedLocalizer["ChooseVHBorVHU"]</legend>
            <form>
                <div class="form-group">
                    <label for="wmb">@SharedLocalizer["VHB"]:</label>
                    <select class="form-control" id="wmb" onchange="ChangeWMB()"></select>
                </div>
                <div class="form-group">
                    <label for="wma">@SharedLocalizer["VHU"]:</label>
                    <select class="form-control" id="wma" onchange="NavigateToWMA(); RefreshWMS();"></select>
                </div>
            </form>
            @*<input type="button" class="btn btn-primary btn-block" value="Обновить" onclick="RefreshWMS()" />*@
        </fieldset>
        <div class="card-body">

        </div>

    </nav>
    <main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-4" style="margin-top: 50px;">
        <h4 id="ChartTitle" class="py-4 text-center bg-light"></h4>
        <div class="row d-flex">
            <div class="col-md-6">
                <div class="card-img-overlay">
                    <div style="width:60%; float:right">
                        <img id="legend" class="card-img-top" src="/esnow/img/legend/Temperature.svg">
                    </div>
                </div>
                <div class="card border-info rounded-0 mb-4 shadow-sm">
                    <div class="card-header rounded-0 bg-info border-info">
                        <div class="input-group input-group-sm">
                            <select class="form-control w-50" id="SubParameter1" onchange="ChangeLayerClimate1()">
                                <option value="tasmax_pd_avg">@SharedLocalizer["MaxTemperature"]</option>
                                <option value="tasmax_dlt_avg">@SharedLocalizer["MaxTemperatureDev"]</option>
                                <option value="tas_pd_avg">@SharedLocalizer["AverageTemperature"]</option>
                                <option value="tas_dlt_avg">@SharedLocalizer["AverageTemperatureDev"]</option>
                                <option value="tasmin_pd_avg">@SharedLocalizer["MinTemperature"]</option>
                                <option value="tasmin_dlt_avg">@SharedLocalizer["MinTemperatureDev"]</option>
                                <option value="pr_pd_avg">@SharedLocalizer["Precipitation"]</option>
                                <option value="pr_dlt_avg_mm">@SharedLocalizer["AveragePrecipitationDev"]</option>
                                <option value="et_pd_avg">@SharedLocalizer["Evapotranspiration"]</option>
                                <option value="et_dlt_avg">@SharedLocalizer["EvapotranspirationDev"]</option>
                            </select>
                            <select class="form-control" id="RCP1" onchange="ChangeLayerClimate1()">
                                <option value="rcp45">rcp 4.5</option>
                                <option value="rcp85">rcp 8.5</option>
                            </select>
                            <select class="form-control" id="Period1" onchange="ChangeLayerClimate1()">
                                <option value="y">@SharedLocalizer["Year"]</option>
                                <optgroup label="@SharedLocalizer["Season"]">
                                    <option value="4">@SharedLocalizer["Winter"]</option>
                                    <option value="1">@SharedLocalizer["Spring"]</option>
                                    <option value="2">@SharedLocalizer["Summer"]</option>
                                    <option value="3">@SharedLocalizer["Autumn"]</option>
                                </optgroup>
                                <optgroup label="@SharedLocalizer["Month"]">
                                    <option value="01">@SharedLocalizer["January"]</option>
                                    <option value="02">@SharedLocalizer["February"]</option>
                                    <option value="03">@SharedLocalizer["March"]</option>
                                    <option value="04">@SharedLocalizer["April"]</option>
                                    <option value="05">@SharedLocalizer["May"]</option>
                                    <option value="06">@SharedLocalizer["June"]</option>
                                    <option value="07">@SharedLocalizer["July"]</option>
                                    <option value="08">@SharedLocalizer["August"]</option>
                                    <option value="09">@SharedLocalizer["September"]</option>
                                    <option value="10">@SharedLocalizer["October"]</option>
                                    <option value="11">@SharedLocalizer["November"]</option>
                                    <option value="12">@SharedLocalizer["December"]</option>
                                </optgroup>
                            </select>
                            <div class="input-group-append">
                                <span class="input-group-text small" id="mapinfo1">1951 - 1960</span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div id="map1">
                            <div class="legend">
                                <img id="legend1" class="card-img-top" src="/esnow/img/legend/Temperature.svg">
                            </div>
                        </div>
                        <div id="popup1" class="ol-popup">
                            <a href="#" id="popup-closer1" class="ol-popup-closer"></a>
                            <div id="popup-content1"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card border-info rounded-0 mb-4 shadow-sm">
                    <div class="card-header rounded-0 bg-info border-info">
                        <div class="input-group input-group-sm">
                            <select class="form-control w-50" id="SubParameter2" onchange="ChangeLayerClimate2()">
                                <option value="tasmax_pd_avg">@SharedLocalizer["MaxTemperature"]</option>
                                <option value="tasmax_dlt_avg">@SharedLocalizer["MaxTemperatureDev"]</option>
                                <option value="tas_pd_avg">@SharedLocalizer["AverageTemperature"]</option>
                                <option value="tas_dlt_avg">@SharedLocalizer["AverageTemperatureDev"]</option>
                                <option value="tasmin_pd_avg">@SharedLocalizer["MinTemperature"]</option>
                                <option value="tasmin_dlt_avg">@SharedLocalizer["MinTemperatureDev"]</option>
                                <option value="pr_pd_avg">@SharedLocalizer["Precipitation"]</option>
                                <option value="pr_dlt_avg_mm">@SharedLocalizer["AveragePrecipitationDev"]</option>
                                <option value="et_pd_avg">@SharedLocalizer["Evapotranspiration"]</option>
                                <option value="et_dlt_avg">@SharedLocalizer["EvapotranspirationDev"]</option>
                            </select>
                            <select class="form-control" id="RCP2" onchange="ChangeLayerClimate2()">
                                <option value="rcp45">rcp 4.5</option>
                                <option value="rcp85">rcp 8.5</option>
                            </select>
                            <select class="form-control" id="Period2" onchange="ChangeLayerClimate2()">
                                <option value="y">@SharedLocalizer["Year"]</option>
                                <optgroup label="@SharedLocalizer["Season"]">
                                    <option value="4">@SharedLocalizer["Winter"]</option>
                                    <option value="1">@SharedLocalizer["Spring"]</option>
                                    <option value="2">@SharedLocalizer["Summer"]</option>
                                    <option value="3">@SharedLocalizer["Autumn"]</option>
                                </optgroup>
                                <optgroup label="@SharedLocalizer["Month"]">
                                    <option value="01">@SharedLocalizer["January"]</option>
                                    <option value="02">@SharedLocalizer["February"]</option>
                                    <option value="03">@SharedLocalizer["March"]</option>
                                    <option value="04">@SharedLocalizer["April"]</option>
                                    <option value="05">@SharedLocalizer["May"]</option>
                                    <option value="06">@SharedLocalizer["June"]</option>
                                    <option value="07">@SharedLocalizer["July"]</option>
                                    <option value="08">@SharedLocalizer["August"]</option>
                                    <option value="09">@SharedLocalizer["September"]</option>
                                    <option value="10">@SharedLocalizer["October"]</option>
                                    <option value="11">@SharedLocalizer["November"]</option>
                                    <option value="12">@SharedLocalizer["December"]</option>
                                </optgroup>
                            </select>
                            <div class="input-group-append">
                                <span class="input-group-text small" id="mapinfo2">1951 - 1960</span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div id="map2">
                            <div class="legend">
                                <img id="legend2" class="card-img-top" src="/esnow/img/legend/Temperature.svg">
                            </div>
                        </div>
                        <div id="popup2" class="ol-popup">
                            <a href="#" id="popup-closer2" class="ol-popup-closer"></a>
                            <div id="popup-content2"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row d-flex">
            <div class="col-md-auto">
                <div class="btn-group mt-2" role="group" aria-label="example">
                    <select class="form-control form-control-lg" id="Decade" onchange="CreateDateSlider();">
                        <option class="text-lowercase" value="10">10 @SharedLocalizer["YearsOld"]</option>
                        <option class="text-lowercase" value="20">20 @SharedLocalizer["YearsOld"]</option>
                        <option class="text-lowercase" value="30">30 @SharedLocalizer["YearsOld"]</option>
                    </select>
                    <button id="MinusBtn" type="button" class="btn btn-primary"><i class="fa fa-step-backward"></i></button>
                    <button id="PlayPauseBtn" type="button" class="btn btn-primary"><i class="fa fa-play-circle fa-2x"></i></button>
                    <button id="PlusBtn" type="button" class="btn btn-primary"><i class="fa fa-step-forward"></i></button>
                </div>
            </div>
            <div class="col" style="cursor: pointer;">
                <input id="ClimateTimeline" class="js-range-slider" name="my_range" value="" />
            </div>
        </div>
        <hr class="featurette-divider">
        <div class="row d-flex">
            <div class="col-auto">
                <div class="card shadow-sm mt-3" id="section0">
                    <div class="card-body">
                        <ul class="nav nav-tabs" id="section01" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="charts-tab" data-toggle="tab" href="#charts" role="tab" aria-controls="charts" aria-selected="true" onclick="TabClick(this)">@SharedLocalizer["Chart"]</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="tables-tab" data-toggle="tab" href="#tables" role="tab" aria-controls="tables" aria-selected="false" onclick="TabClick(this)">@SharedLocalizer["Table"]</a>
                            </li>
                        </ul>
                        <div id="charts" role="tabpanel" aria-labelledby="charts-tab">
                            <div class="btn-toolbar mt-2">
                                <div class="btn-group mr-2">
                                    <div class="btn-group btn-group-sm" role="group" aria-label="Period">
                                        <button type="button" class="btn-default" onclick="Chart1Show(); Table1Show();">@SharedLocalizer["Year"]</button>
                                        <button type="button" class="btn-default" onclick="Chart2Show(); Table2Show();">@SharedLocalizer["Season"]</button>
                                        <button type="button" class="btn-default" onclick="Chart3Show(); Table3Show();">@SharedLocalizer["Month"]</button>
                                    </div>
                                    <div class="btn-group btn-group-sm ml-2" role="group" aria-label="Min-max">
                                        <button type="button" class="btn-danger" onclick="ShowMax()">@SharedLocalizer["Maximum"]</button>
                                        <button type="button" class="btn-primary" onclick="ShowMin()">@SharedLocalizer["Minimum"]</button>
                                        <button type="button" class="btn-info" onclick="ShowMedian()">@SharedLocalizer["Median"]</button>
                                    </div>
                                    <div class="btn-group btn-group-sm ml-2" role="group" aria-label="Chart type">
                                        <button id="changeToLine" onclick="Chart1($('#wma').val(), 'line'); Chart2($('#wma').val(), 'line'); Chart3($('#wma').val(), 'line');"><i class="fa fa-area-chart"></i></button>
                                        <button id="changeToBar" onclick="Chart1($('#wma').val(), 'bar'); Chart2($('#wma').val(), 'bar'); Chart3($('#wma').val(), 'bar');"><i class="fa fa-bar-chart"></i></button>
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-3" id="chartbody1">
                                <div class="col-md-3 order-md-2 mt-2">
                                    <fieldset class="scheduler-border">
                                        <legend class="scheduler-border"> @SharedLocalizer["ChartOptions"] </legend>
                                        <form>
                                            <div class="form-group">
                                                <label for="chart1SubParameter">@SharedLocalizer["ClimateParameter"]:</label>
                                                <select class="form-control form-control-sm" id="chart1SubParameter">
                                                    <option value="tasmax_pd_avg">@SharedLocalizer["MaxTemperature"], ⁰С</option>
                                                    <option value="tas_pd_avg">@SharedLocalizer["AverageTemperature"], ⁰С</option>
                                                    <option value="tasmin_pd_avg">@SharedLocalizer["MinTemperature"], ⁰С</option>
                                                    <option value="pr_pd_avg">@SharedLocalizer["Precipitation"], мм</option>
                                                    <option value="pr_dlt_avg_mm">@SharedLocalizer["AveragePrecipitationDev"]</option>
                                                    <option value="et_pd_avg">@SharedLocalizer["Evapotranspiration"], мм</option>
                                                    <option value="et_dlt_avg">@SharedLocalizer["EvapotranspirationDev"], мм</option>
                                                    <option value="tasmax_dlt_avg">@SharedLocalizer["MaxTemperatureDev"], ⁰С</option>
                                                    <option value="tas_dlt_avg">@SharedLocalizer["AverageTemperatureDev"], ⁰С</option>
                                                    <option value="tasmin_dlt_avg">@SharedLocalizer["MinTemperatureDev"], ⁰С</option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label for="chart1Decade">@SharedLocalizer["Periodicity"]:</label>
                                                <select class="form-control form-control-sm" id="chart1Decade" onchange="chart1UpdateDates()">
                                                    <option class="text-lowercase" value="10">10 @SharedLocalizer["YearsOld"]</option>
                                                    <option class="text-lowercase" value="20">20 @SharedLocalizer["YearsOld"]</option>
                                                    <option class="text-lowercase" value="30">30 @SharedLocalizer["YearsOld"]</option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label for="chart1Decade">RCP:</label>
                                                <select class="form-control form-control-sm" id="chart1RCP">
                                                    <option value="rcp45">rcp 4.5</option>
                                                    <option value="rcp85">rcp 8.5</option>
                                                </select>
                                            </div>
                                            <div id="yearCheckboxesChart1" class="form-group">
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox1951" name="chart1Dates" value="1951" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox1951">1951</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox1961" name="chart1Dates" value="1961" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox1961">1961</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox1971" name="chart1Dates" value="1971" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox1971">1971</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox1981" name="chart1Dates" value="1981" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox1981">1981</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox1991" name="chart1Dates" value="1991" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox1991">1991</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox2001" name="chart1Dates" value="2001" disabled>
                                                    <label class="form-check-label" for="chart1inlineCheckbox2001">2001</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox2011" name="chart1Dates" value="2011" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox2011">2011</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox2021" name="chart1Dates" value="2021" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox2021">2021</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox2031" name="chart1Dates" value="2031" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox2031">2031</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox2041" name="chart1Dates" value="2041" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox2041">2041</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox2051" name="chart1Dates" value="2051" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox2051">2051</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox2061" name="chart1Dates" value="2061" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox2061">2061</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox2071" name="chart1Dates" value="2071" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox2071">2071</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox2081" name="chart1Dates" value="2081" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox2081">2081</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart1inlineCheckbox2091" name="chart1Dates" value="2091" checked>
                                                    <label class="form-check-label" for="chart1inlineCheckbox2091">2091</label>
                                                </div>
                                            </div>
                                        </form>
                                        <input type="button" class="btn btn-outline-primary btn-sm" value="Обновить" onclick="Chart1()" />
                                    </fieldset>
                                </div>
                                <div class="col-md-9">
                                    <div id="chartContainer">
                                        <canvas class="my-1 w-100 chartjs-render-monitor" id="chart1Canvas" width="900" height="380"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-3" id="chartbody2">
                                <div class="col-md-3 order-md-2 mt-2">
                                    <fieldset class="scheduler-border">
                                        <legend class="scheduler-border"> @SharedLocalizer["ChartOptions"] </legend>
                                        <div class="form-group">
                                            <label for="chartType" class="mr-2">@SharedLocalizer["ChartType"]:</label>
                                            <select name="chartType" id="chartType" onchange="updateChartType()">
                                                <option value="line">@SharedLocalizer["Lines"]</option>
                                                <option value="bar">@SharedLocalizer["Columns"]</option>
                                                <option value="radar">@SharedLocalizer["Radar"]</option>
                                            </select>
                                        </div>
                                        <form>
                                            <div class="form-group">
                                                <label for="chart2SubParameter">@SharedLocalizer["ClimateParameter"]:</label>
                                                <select class="form-control form-control-sm" id="chart2SubParameter">
                                                    <option value="tasmax_pd_avg">@SharedLocalizer["MaxTemperature"], ⁰С</option>
                                                    <option value="tas_pd_avg">@SharedLocalizer["AverageTemperature"], ⁰С</option>
                                                    <option value="tasmin_pd_avg">@SharedLocalizer["MinTemperature"], ⁰С</option>
                                                    <option value="pr_pd_avg">@SharedLocalizer["Precipitation"], мм</option>
                                                    <option value="pr_dlt_avg_mm">@SharedLocalizer["AveragePrecipitationDev"]</option>
                                                    <option value="et_pd_avg">@SharedLocalizer["Evapotranspiration"], мм</option>
                                                    <option value="et_dlt_avg">@SharedLocalizer["EvapotranspirationDev"], мм</option>
                                                    <option value="tasmax_dlt_avg">@SharedLocalizer["MaxTemperatureDev"], ⁰С</option>
                                                    <option value="tas_dlt_avg">@SharedLocalizer["AverageTemperatureDev"], ⁰С</option>
                                                    <option value="tasmin_dlt_avg">@SharedLocalizer["MinTemperatureDev"], ⁰С</option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label for="chart2Decade">@SharedLocalizer["Periodicity"]:</label>
                                                <select class="form-control form-control-sm" id="chart2Decade" onchange="chart2UpdateDates()">
                                                    <option class="text-lowercase" value="10">10 @SharedLocalizer["YearsOld"]</option>
                                                    <option class="text-lowercase" value="20">20 @SharedLocalizer["YearsOld"]</option>
                                                    <option class="text-lowercase" value="30">30 @SharedLocalizer["YearsOld"]</option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label for="chart2Decade">RCP:</label>
                                                <select class="form-control form-control-sm" id="chart2RCP">
                                                    <option value="rcp45">rcp 4.5</option>
                                                    <option value="rcp85">rcp 8.5</option>
                                                </select>
                                            </div>
                                            <div id="yearCheckboxesChart2" class="form-group">
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox1951" name="chart2Dates" value="1951" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox1951">1951</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox1961" name="chart2Dates" value="1961" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox1961">1961</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox1971" name="chart2Dates" value="1971" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox1971">1971</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox1981" name="chart2Dates" value="1981" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox1981">1981</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox1991" name="chart2Dates" value="1991" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox1991">1991</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox2001" name="chart2Dates" value="2001" disabled>
                                                    <label class="form-check-label" for="chart2inlineCheckbox2001">2001</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox2011" name="chart2Dates" value="2011" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox2011">2011</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox2021" name="chart2Dates" value="2021" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox2021">2021</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox2031" name="chart2Dates" value="2031" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox2031">2031</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox2041" name="chart2Dates" value="2041" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox2041">2041</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox2051" name="chart2Dates" value="2051" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox2051">2051</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox2061" name="chart2Dates" value="2061" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox2061">2061</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox2071" name="chart2Dates" value="2071" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox2071">2071</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox2081" name="chart2Dates" value="2081" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox2081">2081</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2inlineCheckbox2091" name="chart2Dates" value="2091" checked>
                                                    <label class="form-check-label" for="chart2inlineCheckbox2091">2091</label>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2Season1" name="chart2Seasons" value="1" checked>
                                                    <label class="form-check-label" for="chart2Season1">@SharedLocalizer["Spring"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2Season2" name="chart2Seasons" value="2">
                                                    <label class="form-check-label" for="chart2Season2">@SharedLocalizer["Summer"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2Season3" name="chart2Seasons" value="3">
                                                    <label class="form-check-label" for="chart2Season3">@SharedLocalizer["Autumn"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart2Season4" name="chart2Seasons" value="4">
                                                    <label class="form-check-label" for="chart2Season4">@SharedLocalizer["Winter"]</label>
                                                </div>
                                            </div>
                                        </form>
                                        <input type="button" class="btn btn-outline-primary btn-sm" value="@SharedLocalizer["Refresh"]" onclick="Chart2()" />
                                    </fieldset>
                                </div>
                                <div class="col-md-9">
                                    <canvas class="my-1 w-100 chartjs-render-monitor" id="chart2Canvas" width="900" height="380"></canvas>
                                </div>
                            </div>
                            <div class="row mb-3" id="chartbody3">
                                <div class="col-md-3 order-md-2 mt-2">
                                    <fieldset class="scheduler-border">
                                        <legend class="scheduler-border"> @SharedLocalizer["ChartOptions"] </legend>
                                        <form>
                                            <div class="form-group">
                                                <label for="chart3SubParameter">@SharedLocalizer["ClimateParameter"]:</label>
                                                <select class="form-control form-control-sm" id="chart3SubParameter">
                                                    <option value="tasmax_pd_avg">@SharedLocalizer["MaxTemperature"], ⁰С</option>
                                                    <option value="tas_pd_avg">@SharedLocalizer["AverageTemperature"], ⁰С</option>
                                                    <option value="tasmin_pd_avg">@SharedLocalizer["MinTemperature"], ⁰С</option>
                                                    <option value="pr_pd_avg">@SharedLocalizer["Precipitation"], мм</option>
                                                    <option value="pr_dlt_avg_mm">@SharedLocalizer["AveragePrecipitationDev"]</option>
                                                    <option value="et_pd_avg">@SharedLocalizer["Evapotranspiration"], мм</option>
                                                    <option value="et_dlt_avg">@SharedLocalizer["EvapotranspirationDev"], мм</option>
                                                    <option value="tasmax_dlt_avg">@SharedLocalizer["MaxTemperatureDev"], ⁰С</option>
                                                    <option value="tas_dlt_avg">@SharedLocalizer["AverageTemperatureDev"], ⁰С</option>
                                                    <option value="tasmin_dlt_avg">@SharedLocalizer["MinTemperatureDev"], ⁰С</option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label for="chart3Decade">@SharedLocalizer["Periodicity"]:</label>
                                                <select class="form-control form-control-sm" id="chart3Decade" onchange="chart3UpdateDates()">
                                                    <option class="text-lowercase" value="10">10 @SharedLocalizer["YearsOld"]</option>
                                                    <option class="text-lowercase" value="20">20 @SharedLocalizer["YearsOld"]</option>
                                                    <option class="text-lowercase" value="30">30 @SharedLocalizer["YearsOld"]</option>
                                                </select>
                                            </div>
                                            <div class="form-group">
                                                <label for="chart3Decade">RCP:</label>
                                                <select class="form-control form-control-sm" id="chart3RCP">
                                                    <option value="rcp45">rcp 4.5</option>
                                                    <option value="rcp85">rcp 8.5</option>
                                                </select>
                                            </div>
                                            <div id="yearCheckboxesChart3" class="form-group">
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox1951" name="chart3Dates" value="1951" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox1951">1951</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox1961" name="chart3Dates" value="1961" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox1961">1961</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox1971" name="chart3Dates" value="1971" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox1971">1971</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox1981" name="chart3Dates" value="1981" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox1981">1981</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox1991" name="chart3Dates" value="1991" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox1991">1991</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox2001" name="chart3Dates" value="2001" disabled>
                                                    <label class="form-check-label" for="chart3inlineCheckbox2001">2001</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox2011" name="chart3Dates" value="2011" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox2011">2011</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox2021" name="chart3Dates" value="2021" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox2021">2021</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox2031" name="chart3Dates" value="2031" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox2031">2031</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox2041" name="chart3Dates" value="2041" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox2041">2041</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox2051" name="chart3Dates" value="2051" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox2051">2051</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox2061" name="chart3Dates" value="2061" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox2061">2061</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox2071" name="chart3Dates" value="2071" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox2071">2071</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox2081" name="chart3Dates" value="2081" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox2081">2081</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3inlineCheckbox2091" name="chart3Dates" value="2091" checked>
                                                    <label class="form-check-label" for="chart3inlineCheckbox2091">2091</label>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3Month1" name="chart3Months" value="1" checked>
                                                    <label class="form-check-label" for="chart3Month1">@SharedLocalizer["January"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3Month2" name="chart3Months" value="2">
                                                    <label class="form-check-label" for="chart3Month2">@SharedLocalizer["February"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3Month3" name="chart3Months" value="3">
                                                    <label class="form-check-label" for="chart3Month3">@SharedLocalizer["March"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3Month4" name="chart3Months" value="4">
                                                    <label class="form-check-label" for="chart3Month4">@SharedLocalizer["April"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3Month5" name="chart3Months" value="5">
                                                    <label class="form-check-label" for="chart3Month5">@SharedLocalizer["May"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3Month6" name="chart3Months" value="6">
                                                    <label class="form-check-label" for="chart3Month6">@SharedLocalizer["June"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3Month7" name="chart3Months" value="7">
                                                    <label class="form-check-label" for="chart3Month7">@SharedLocalizer["July"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3Month8" name="chart3Months" value="8">
                                                    <label class="form-check-label" for="chart3Month8">@SharedLocalizer["August"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3Month9" name="chart3Months" value="9">
                                                    <label class="form-check-label" for="chart3Month9">@SharedLocalizer["September"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3Month10" name="chart3Months" value="10">
                                                    <label class="form-check-label" for="chart3Month10">@SharedLocalizer["October"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3Month11" name="chart3Months" value="11">
                                                    <label class="form-check-label" for="chart3Month11">@SharedLocalizer["November"]</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="checkbox" id="chart3Month12" name="chart3Months" value="12">
                                                    <label class="form-check-label" for="chart3Month12">@SharedLocalizer["December"]</label>
                                                </div>
                                            </div>
                                        </form>
                                        <input type="button" class="btn btn-outline-primary btn-sm" value="@SharedLocalizer["Refresh"]" onclick="Chart3()" />
                                    </fieldset>
                                </div>
                                <div class="col-md-9">
                                    <canvas class="my-4 w-100 chartjs-render-monitor" id="chart3Canvas" width="900" height="380"></canvas>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade active show" id="tables" role="tabpanel" aria-labelledby="tables-tab">
                            @*<p class="card-text text-secondary">Averages for the decade 1981–2010</p>*@
                            <div id="table1" class="table-responsive">
                                <h4 id="table1title"></h4>
                                <table id="rasterdata1" class="table table-striped"
                                       data-toggle="table"
                                       data-buttons="btn btn-sm"
                                       data-buttons-class="primary"
                                       data-search="true"
                                       data-detail-view="true"
                                       data-detail-view-icon="false"
                                       data-show-fullscreen="true"
                                       data-show-refresh="true"
                                       data-show-columns="true"
                                       data-show-print="true"
                                       data-show-export="true">
                                    <thead class="thead-light">
                                        <tr>
                                            <th data-field="period"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Period"]</th>
                                            <th data-field="max"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Maximum"]</th>
                                            <th data-field="min"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Minimum"]</th>
                                            <th data-field="median"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Median"]</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>
                            <div id="table2" class="table-responsive">
                                <h4 id="table2title"></h4>
                                <table id="rasterdata2" class="table table-striped"
                                       data-toggle="table"
                                       data-buttons="btn btn-sm"
                                       data-buttons-class="primary"
                                       data-search="true"
                                       data-detail-view="true"
                                       data-detail-view-icon="false"
                                       data-show-fullscreen="true"
                                       data-show-refresh="true"
                                       data-show-columns="true"
                                       data-show-print="true"
                                       data-show-export="true">
                                    <thead class="thead-light">
                                        <tr>
                                            <th data-field="period"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Period"]</th>
                                            <th data-field="season"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Season"]</th>
                                            <th data-field="max"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Maximum"]</th>
                                            <th data-field="min"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Minimum"]</th>
                                            <th data-field="median"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Median"]</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>
                            <div id="table3" class="table-responsive">
                                <h4 id="table3title"></h4>
                                <table id="rasterdata3" class="table table-striped"
                                       data-toggle="table"
                                       data-buttons="btn btn-sm"
                                       data-buttons-class="primary"
                                       data-search="true"
                                       data-detail-view="true"
                                       data-detail-view-icon="false"
                                       data-show-fullscreen="true"
                                       data-show-refresh="true"
                                       data-show-columns="true"
                                       data-show-print="true"
                                       data-show-export="true">
                                    <thead class="thead-light">
                                        <tr>
                                            <th data-field="period"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Period"]</th>
                                            <th data-field="month"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Month"]</th>
                                            <th data-field="max"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Maximum"]</th>
                                            <th data-field="min"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Minimum"]</th>
                                            <th data-field="median"
                                                data-detail-formatter="idDetailMonth">@SharedLocalizer["Median"]</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
</div>

@* Chart1, chart1UpdateDates *@
<script>
    var chart1 = null,
        chart2 = null,
        chart3 = null;

    function chart1UpdateDates() {
        $('input:checkbox[name="chart1Dates"][value="1991"]').removeAttr('disabled');
        $('input:checkbox[name="chart1Dates"][value="1981"]').removeAttr('disabled');
        $('input:checkbox[name="chart1Dates"][value="2091"]').removeAttr('disabled');
        $('input:checkbox[name="chart1Dates"][value="2081"]').removeAttr('disabled');
        if ($('#chart1Decade').val() == 20) {
            $('input:checkbox[name="chart1Dates"][value="1991"]').prop('checked', false);
            $('input:checkbox[name="chart1Dates"][value="1991"]').prop("disabled", true);
            $('input:checkbox[name="chart1Dates"][value="2091"]').prop('checked', false);
            $('input:checkbox[name="chart1Dates"][value="2091"]').prop("disabled", true);
        }
        if ($('#chart1Decade').val() == 30) {
            $('input:checkbox[name="chart1Dates"][value="1991"]').prop('checked', false);
            $('input:checkbox[name="chart1Dates"][value="1991"]').prop("disabled", true);
            $('input:checkbox[name="chart1Dates"][value="1981"]').prop('checked', false);
            $('input:checkbox[name="chart1Dates"][value="1981"]').prop("disabled", true);
            $('input:checkbox[name="chart1Dates"][value="2091"]').prop('checked', false);
            $('input:checkbox[name="chart1Dates"][value="2091"]').prop("disabled", true);
            $('input:checkbox[name="chart1Dates"][value="2081"]').prop('checked', false);
            $('input:checkbox[name="chart1Dates"][value="2081"]').prop("disabled", true);
        }
    }

    function chart2UpdateDates() {
        $('input:checkbox[name="chart2Dates"][value="1991"]').removeAttr('disabled');
        $('input:checkbox[name="chart2Dates"][value="1981"]').removeAttr('disabled');
        $('input:checkbox[name="chart1Dates"][value="2091"]').removeAttr('disabled');
        $('input:checkbox[name="chart1Dates"][value="2081"]').removeAttr('disabled');
        if ($('#chart2Decade').val() == 20) {
            $('input:checkbox[name="chart2Dates"][value="1991"]').prop('checked', false);
            $('input:checkbox[name="chart2Dates"][value="1991"]').prop("disabled", true);
            $('input:checkbox[name="chart1Dates"][value="2091"]').prop('checked', false);
            $('input:checkbox[name="chart1Dates"][value="2091"]').prop("disabled", true);
        }
        if ($('#chart2Decade').val() == 30) {
            $('input:checkbox[name="chart2Dates"][value="1991"]').prop('checked', false);
            $('input:checkbox[name="chart2Dates"][value="1991"]').prop("disabled", true);
            $('input:checkbox[name="chart2Dates"][value="1981"]').prop('checked', false);
            $('input:checkbox[name="chart2Dates"][value="1981"]').prop("disabled", true);
            $('input:checkbox[name="chart1Dates"][value="2091"]').prop('checked', false);
            $('input:checkbox[name="chart1Dates"][value="2091"]').prop("disabled", true);
            $('input:checkbox[name="chart1Dates"][value="2081"]').prop('checked', false);
            $('input:checkbox[name="chart1Dates"][value="2081"]').prop("disabled", true);
        }
    }

    function chart3UpdateDates() {
        $('input:checkbox[name="chart3Dates"][value="1991"]').removeAttr('disabled');
        $('input:checkbox[name="chart3Dates"][value="1981"]').removeAttr('disabled');
        $('input:checkbox[name="chart1Dates"][value="2091"]').removeAttr('disabled');
        $('input:checkbox[name="chart1Dates"][value="2081"]').removeAttr('disabled');
        if ($('#chart3Decade').val() == 20) {
            $('input:checkbox[name="chart3Dates"][value="1991"]').prop('checked', false);
            $('input:checkbox[name="chart3Dates"][value="1991"]').prop("disabled", true);
            $('input:checkbox[name="chart1Dates"][value="2091"]').prop('checked', false);
            $('input:checkbox[name="chart1Dates"][value="2091"]').prop("disabled", true);
        }
        if ($('#chart3Decade').val() == 30) {
            $('input:checkbox[name="chart3Dates"][value="1991"]').prop('checked', false);
            $('input:checkbox[name="chart3Dates"][value="1991"]').prop("disabled", true);
            $('input:checkbox[name="chart3Dates"][value="1981"]').prop('checked', false);
            $('input:checkbox[name="chart3Dates"][value="1981"]').prop("disabled", true);
            $('input:checkbox[name="chart1Dates"][value="2091"]').prop('checked', false);
            $('input:checkbox[name="chart1Dates"][value="2091"]').prop("disabled", true);
            $('input:checkbox[name="chart1Dates"][value="2081"]').prop('checked', false);
            $('input:checkbox[name="chart1Dates"][value="2081"]').prop("disabled", true);
        }
    }

    function Chart1(objectid, type ='line') {
        var Id = objectid;
        if (objectid == null) {
            Id = @ViewBag.Id;
        }
        var chart1Dates = [];
        $("input:checkbox[name=chart1Dates]:checked").each(function(){
            chart1Dates.push($(this).val());
        });
        $.ajax({
            url: '@Url.Action("GetChart1")',
            data: {
                Id: Id,
                SubParameter: $('#chart1SubParameter').val(),
                Decade: $('#chart1Decade').val(),
                RCP: $('#chart1RCP').val(),
                Dates: chart1Dates
            },
            type: 'POST',
            success: function (data) {
                Table1(Id, $('#chart1SubParameter').val(), $('#chart1Decade').val(), $('#chart1RCP').val(), chart1Dates);

                $('#ChartTitle').text('ВХБ - ' + data.wmbname + ' (ВХУ - ' + data.wmacode + ')');
                for (var i = 0; i < data.max.length; ++i) {
                    data.max[i] = parseFloat(data.max[i]).toFixed(2);
                }
                for (var i = 0; i < data.min.length; ++i) {
                    data.min[i] = parseFloat(data.min[i]).toFixed(2);
                }
                for (var i = 0; i < data.median.length; ++i) {
                    data.median[i] = parseFloat(data.median[i]).toFixed(2);
                }
                var chart1Data = {
                    labels: data.years,
                    datasets: [{
                        label: '@SharedLocalizer["Maximum"]',
                        backgroundColor: 'rgba(255, 99, 132, 0.5)',
                        borderColor: 'rgba(255,99,132,1)',
                        borderWidth: 1,
                        data: data.max
                    }, {
                        label: '@SharedLocalizer["Minimum"]',
                        backgroundColor: 'rgba(153, 102, 255, 0.5)',
                        borderColor: 'rgba(153, 102, 255,1)',
                        borderWidth: 1,
                        data: data.min
                    }, {
                        label: '@SharedLocalizer["Median"]',
                        backgroundColor: "rgba(75, 192, 192, 0.5)",
                        borderColor: "rgba(75, 192, 192,1)",
                        borderWidth: 1,
                        data: data.median
                    }]
                };

                var ctx1 = document.getElementById('chart1Canvas').getContext('2d');
                if (chart1 != null) {
                    chart1.destroy();
                }
                chart1 = new Chart(ctx1, {
                    type: type,
                    data: chart1Data,
                    options: {
                        responsive: true,
                        legend: {
                            position: 'bottom',
                        },
                        title: {
                            display: true,
                            fontSize: 20,
                            fontColor: '#000',
                            //text: ['ВХБ - ' + data.wmbname + ' (ВХУ - ' + data.wmacode + ')', $("#chart1SubParameter option:selected ").text() +' ('+ $("#chart1Decade option:selected").text()+'/'+ $("#chart1RCP option:selected").text()+')']
                            text: $("#chart1SubParameter option:selected ").text() + ' (' + $("#chart1Decade option:selected").text() + '/' + $("#chart1RCP option:selected").text() + ')'
                        },
                        tooltips: {
						    mode: 'index',
						    intersect: false
					    }
                    }
                });
                ShowMedian();
                if ($('#chart1SubParameter').val() == 'tasmax_pd_avg') {
                    ShowMax();
                }
         //       document.getElementById('changeToLine').onclick = function () {
         //           chart1.destroy();
         //           chart1 = new Chart(ctx1, {
         //               type: 'line',
         //               data: chart1Data,
         //               options: {
         //               responsive: true,
         //               legend: {
         //                   position: 'right',
         //               },
         //               title: {
         //                   display: true,
         //                   fontSize: 20,
         //                   fontColor: '#000',
         //                   //text: 'ВХБ - ' + data.wmbname + ' (ВХУ - ' + data.wmacode + ')'
         //               },
         //               tooltips: {
						   // mode: 'index',
						   // intersect: false
					    //}
         //           }
         //           });
         //       };
            },
            error: function () {
                console.log('Error 1');
            }
        });
    };

    function Chart2(objectid, type = 'line') {
        var Id = objectid;
        if (objectid == null) {
            Id = @ViewBag.Id;
        }
        var seasonNames = ['@SharedLocalizer["Spring"]', '@SharedLocalizer["Summer"]', '@SharedLocalizer["Autumn"]', '@SharedLocalizer["Winter"]'],
            seasonColors = ['rgba(0, 128, 0, 0.7)', 'rgba(230, 0, 0, 0.7)', 'rgba(219, 205, 0, 0.7)', 'rgba(34, 26, 194, 0.7)'],
            seasonMaxColors = ['rgba(0, 128, 0, 0.7)', 'rgba(230, 0, 0, 0.7)', 'rgba(219, 205, 0, 0.7)', 'rgba(34, 26, 194, 0.7)'],
            seasonMinColors = ['rgba(102, 203, 102, 0.4)', 'rgba(255, 102, 102, 0.4)', 'rgba(255, 255, 113, 0.4)', 'rgba(161, 153, 255, 0.4)'],
            seasonMedianColors = ['rgba(51, 179, 51, 0.6)', 'rgba(255, 51, 51, 0.6)', 'rgba(255, 255, 51, 0.6)', 'rgba(59, 51, 219, 0.6)'];
        var chart2Dates = [];
        $("input:checkbox[name=chart2Dates]:checked").each(function () {
            chart2Dates.push(parseInt($(this).val()));
        });
        var chart2Seasons = [];
        $("input:checkbox[name=chart2Seasons]:checked").each(function(){
            chart2Seasons.push(parseInt($(this).val()));
        });
        $.ajax({
            url: '@Url.Action("GetChart2")',
            data: {
                Id: Id,
                SubParameter: $('#chart2SubParameter').val(),
                Decade: $('#chart2Decade').val(),
                RCP: $('#chart2RCP').val(),
                Dates: chart2Dates,
                Seasons: chart2Seasons
            },
            type: 'POST',
            success: function (data) {
                Table2(Id, $('#chart2SubParameter').val(), $('#chart2Decade').val(), $('#chart2RCP').val(), chart2Dates, chart2Seasons);

                $('#ChartTitle').text('ВХБ - ' + data.wmbname + ' (ВХУ - ' + data.wmacode + ')');
                // 0 - spring
                for (var i = 0; i < data.max.length; ++i) {
                    for (var j = 0; j < data.max[i].length; ++j) {
                        data.max[i][j] = parseFloat(data.max[i][j]).toFixed(2);
                    }
                }
                for (var i = 0; i < data.min.length; ++i) {
                    for (var j = 0; j < data.min[i].length; ++j) {
                        data.min[i][j] = parseFloat(data.min[i][j]).toFixed(2);
                    }
                }
                for (var i = 0; i < data.median.length; ++i) {
                    for (var j = 0; j < data.median[i].length; ++j) {
                        data.median[i][j] = parseFloat(data.median[i][j]).toFixed(2);
                    }
                }
                var chart2Data = {
                    labels: data.years,
                    datasets: []
                };
                for (var i = 0; i < data.max.length; ++i) {
                    if (chart2Seasons.includes(i + 1)) {
                        chart2Data.datasets.push({
                            label: '@SharedLocalizer["Maximum"] (' + seasonNames[i] + ')',
                            backgroundColor: seasonMaxColors[i],
                            borderColor: 'rgba(3, 0, 51, 0.7)',
                            borderWidth: 1,
                            stack: 'max',
                            data: data.max[i]
                        });
                    }
                }
                for (var i = 0; i < data.max.length; ++i) {
                    if (chart2Seasons.includes(i + 1)) {
                        chart2Data.datasets.push({
                            label: '@SharedLocalizer["Minimum"] (' + seasonNames[i] + ')',
                            backgroundColor: seasonMinColors[i],
                            borderColor: 'rgba(3, 0, 51, 0.7)',
                            borderWidth: 1,
                            stack: 'min',
                            data: data.min[i]
                        });
                    }
                }
                for (var i = 0; i < data.max.length; ++i) {
                    if (chart2Seasons.includes(i + 1)) {
                        chart2Data.datasets.push({
                            label: '@SharedLocalizer["Median"] (' + seasonNames[i] + ')',
                            backgroundColor: seasonMedianColors[i],
                            borderColor: 'rgba(3, 0, 51, 0.7)',
                            borderWidth: 1,
                            stack: 'median',
                            data: data.median[i]
                        });
                    }
                }
                var ctx2 = document.getElementById('chart2Canvas').getContext('2d');
                //var type = document.getElementById("chartType").value;
                if (chart2 != null) {
                    chart2.destroy();
                }
                chart2 = new Chart(ctx2, {
                    type: type,
                    data: chart2Data,
                    options: {
                        responsive: true,
                        legend: {
                            position: 'right',
                        },
                        title: {
                            display: true,
                            fontSize: 20,
                            fontColor: '#000',
                            //text: 'ВХБ - ' + data.wmbname + ' (ВХУ - ' + data.wmacode + ')'
                            text: $("#chart2SubParameter option:selected ").text() + ' (' + $("#chart2Decade option:selected").text() + '/' + $("#chart2RCP option:selected").text() + ')'
                        },
                        tooltips: {
                            mode: 'index',
                            intersect: false
                        }
                    }
                });
                ShowMedian();
                if ($('#chart2SubParameter').val() == 'tasmax_pd_avg') {
                    ShowMax();
                }
            },
            error: function () {
            }
        });
    };

    function Chart3(objectid, type = 'line') {
        var Id = objectid;
        if (objectid == null) {
            Id = @ViewBag.Id;
        }
        var monthNames = ['@SharedLocalizer["January"]', '@SharedLocalizer["February"]', '@SharedLocalizer["March"]', '@SharedLocalizer["April"]', '@SharedLocalizer["May"]', '@SharedLocalizer["June"]', '@SharedLocalizer["July"]', '@SharedLocalizer["August"]', '@SharedLocalizer["September"]', '@SharedLocalizer["October"]', '@SharedLocalizer["November"]', '@SharedLocalizer["December"]'];
            monthColors =[
                'rgba(255, 99, 132, 0.5)',
                'rgba(153, 102, 255, 0.5)',
                'rgba(75, 192, 192, 0.5)',
                'rgba(150, 153, 75, 0.5)',
                'rgba(205, 130, 20, 0.5)',
                'rgba(63, 70, 250, 0.5)',
                'rgba(87, 50, 200, 0.5)',
                'rgba(169, 190, 75, 0.5)',
                'rgba(175, 240, 20, 0.5)',
                'rgba(25, 250, 150, 0.5)',
                'rgba(200, 20, 75, 0.5)',
                'rgba(175, 150, 100, 0.5)'],
            monthMaxColors =[
                'rgba(0, 112, 255, 0.5)',
                'rgba(0, 197, 255, 0.5)',
                'rgba(0, 255, 197, 0.5)',
                'rgba(85, 255, 0, 0.5)',
                'rgba(170, 255, 0, 0.5)',
                'rgba(255, 255, 0, 0.5)',
                'rgba(255, 170, 0, 0.5)',
                'rgba(255, 85, 0, 0.5)',
                'rgba(255, 0, 0, 0.5)',
                'rgba(168, 0, 0, 0.5)',
                'rgba(255, 0, 197, 0.5)',
                'rgba(197, 0, 255, 0.5)'],
            monthMinColors =[
                'rgba(191, 255, 255, 0.5)',
                'rgba(150, 255, 255, 0.5)',
                'rgba(115, 255, 255, 0.5)',
                'rgba(255, 255, 191, 0.5)',
                'rgba(255, 255, 153, 0.5)',
                'rgba(255, 255, 229, 0.5)',
                'rgba(255, 255, 110, 0.5)',
                'rgba(255, 255, 204, 0.5)',
                'rgba(255, 229, 229, 0.5)',
                'rgba(255, 204, 211, 0.5)',
                'rgba(255, 204, 255, 0.5)',
                'rgba(255, 191, 255, 0.5)'],
            monthMedianColors =[
                'rgba(77, 189, 255, 0.5)',
                'rgba(102, 214, 255, 0.5)',
                'rgba(85, 255, 235, 0.5)',
                'rgba(162, 255, 77, 0.5)',
                'rgba(208, 255, 38, 0.5)',
                'rgba(255, 255, 115, 0.5)',
                'rgba(255, 208, 38, 0.5)',
                'rgba(255, 162, 77, 0.5)',
                'rgba(255, 77, 77, 0.5)',
                'rgba(245, 51, 58, 0.5)',
                'rgba(255, 102, 255, 0.5)',
                'rgba(255, 77, 255, 0.7)'];
        var chart3Dates = [];
        $("input:checkbox[name=chart3Dates]:checked").each(function () {
            chart3Dates.push(parseInt($(this).val()));
        });
        var chart3Months = [];
        $("input:checkbox[name=chart3Months]:checked").each(function(){
            chart3Months.push(parseInt($(this).val()));
        });
        $.ajax({
            url: '@Url.Action("GetChart3")',
            data: {
                Id: Id,
                SubParameter: $('#chart3SubParameter').val(),
                Decade: $('#chart3Decade').val(),
                RCP: $('#chart3RCP').val(),
                Dates: chart3Dates,
                Months: chart3Months
            },
            type: 'POST',
            success: function (data) {
                Table3(Id, $('#chart3SubParameter').val(), $('#chart3Decade').val(), $('#chart3RCP').val(), chart3Dates, chart3Months);

                $('#ChartTitle').text('ВХБ - ' + data.wmbname + ' (ВХУ - ' + data.wmacode + ')');
                for (var i = 0; i < data.max.length; ++i) {
                    for (var j = 0; j < data.max[i].length; ++j) {
                        data.max[i][j] = parseFloat(data.max[i][j]).toFixed(2);
                    }
                }
                for (var i = 0; i < data.min.length; ++i) {
                    for (var j = 0; j < data.min[i].length; ++j) {
                        data.min[i][j] = parseFloat(data.min[i][j]).toFixed(2);
                    }
                }
                for (var i = 0; i < data.median.length; ++i) {
                    for (var j = 0; j < data.median[i].length; ++j) {
                        data.median[i][j] = parseFloat(data.median[i][j]).toFixed(2);
                    }
                }
                var chart3Data = {
                    labels: data.years,
                    datasets: []
                };
                for (var i = 0; i < data.max.length; ++i) {
                    if (chart3Months.includes(i + 1)) {
                        chart3Data.datasets.push({
                            label: '@SharedLocalizer["Maximum"] (' + monthNames[i] + ')',
                            backgroundColor: monthMaxColors[i],
                            borderColor: 'rgba(8, 0, 97, 1)',
                            borderWidth: 1,
                            stack: 'max',
                            data: data.max[i]
                        });
                    }
                }
                for (var i = 0; i < data.max.length; ++i) {
                    if (chart3Months.includes(i + 1)) {
                        chart3Data.datasets.push({
                            label: '@SharedLocalizer["Minimum"] (' + monthNames[i] + ')',
                            backgroundColor: monthMinColors[i],
                            borderColor: 'rgba(8, 0, 97, 1)',
                            borderWidth: 1,
                            stack: 'min',
                            data: data.min[i]
                        });
                    }
                }
                for (var i = 0; i < data.max.length; ++i) {
                    if (chart3Months.includes(i + 1)) {
                        chart3Data.datasets.push({
                            label: '@SharedLocalizer["Median"] (' + monthNames[i] + ')',
                            backgroundColor: monthMedianColors[i],
                            borderColor: 'rgba(8, 0, 97, 1)',
                            borderWidth: 1,
                            stack: 'median',
                            data: data.median[i]
                        });
                    }
                }
                var ctx2 = document.getElementById('chart3Canvas').getContext('2d');
                if (chart3 != null) {
                    chart3.destroy();
                }
                chart3 = new Chart(ctx2, {
                    type: type,
                    data: chart3Data,
                    options: {
                        responsive: true,
                        legend: {
                            position: 'right',
                        },
                        title: {
                            display: true,
                            fontSize: 20,
                            fontColor: '#000',
                            //text: 'ВХБ - ' + data.wmbname + ' (ВХУ - ' + data.wmacode + ')'
                            text: $("#chart3SubParameter option:selected ").text() + ' (' + $("#chart3Decade option:selected").text() + '/' + $("#chart3RCP option:selected").text() + ')'
                        },
                        tooltips: {
						    mode: 'index',
						    intersect: false
					    }
                    }
                });
                ShowMedian();
                if ($('#chart3SubParameter').val() == 'tasmax_pd_avg') {
                    ShowMax();
                }
            },
            error: function () {
            }
        });
    };
    //add event listener to button
    function saveAsPDF() {
        html2canvas(document.getElementById("chartContainer"), {
            onrendered: function (canvas) {
                // get size of report page
                var reportPageHeight = $('#chart1Canvas').innerHeight();
                var reportPageWidth = $('#chart1Canvas').innerWidth();
                var img = canvas.toDataURL(); //image data of canvas
                var doc = new jsPDF('a4', 'pt', [reportPageWidth, reportPageHeight]);
                doc.addImage(img, 10, 10);
                doc.save('test.pdf');
            }
        });
    }
</script>

@* Table1, Table2, Table3 *@

<script>
    function Table1(Id, SubParameter, Decade, RCP, Dates) {
        $('#table1title').text($("#chart1SubParameter option:selected ").text() + ' (' + $("#chart1Decade option:selected").text() + '/' + $("#chart1RCP option:selected").text() + ')');
        $.ajax({
            url: '@Url.Action("GetTable1")',
            data: {
                Id: Id,
                SubParameter: SubParameter,
                Decade: Decade,
                RCP: RCP,
                Dates: Dates
            },
            //async: false,
            type: 'POST',
            success: function (data) {
                raster_data = data.raster_table_for_chart_bs;
                for (var i = 0; i < raster_data.length; ++i) {
                    if (raster_data[i].max) {
                        raster_data[i].max = raster_data[i].max.toFixed(2);
                    }
                    if (raster_data[i].min) {
                        raster_data[i].min = raster_data[i].min.toFixed(2);
                    }
                    if (raster_data[i].median) {
                        raster_data[i].median = raster_data[i].median.toFixed(2);
                    }
                }
                $(function () {
                    $('#rasterdata1').bootstrapTable('destroy').bootstrapTable({
                        data: raster_data,
                        iconSize: "sm",
                        exportOptions: {
                            preventInjection: false
                        }
                    });
                    $('#rasterdata1').bootstrapTable('load', raster_data);
                })
            },
            error: function () {
                console.log('Error TableRasters');
            }
        });
    }

    function Table2(Id, SubParameter, Decade, RCP, Dates, Seasons) {
        $('#table2title').text($("#chart2SubParameter option:selected ").text() + ' (' + $("#chart2Decade option:selected").text() + '/' + $("#chart2RCP option:selected").text() + ')');
        $.ajax({
            url: '@Url.Action("GetTable2")',
            data: {
                Id: Id,
                SubParameter: SubParameter,
                Decade: Decade,
                RCP: RCP,
                Dates: Dates,
                Seasons: Seasons
            },
            //async: false,
            type: 'POST',
            success: function (data) {
                raster_data = data.raster_table_for_chart_bs;
                for (var i = 0; i < raster_data.length; ++i) {
                    if (raster_data[i].max) {
                        raster_data[i].max = raster_data[i].max.toFixed(2);
                    }
                    if (raster_data[i].min) {
                        raster_data[i].min = raster_data[i].min.toFixed(2);
                    }
                    if (raster_data[i].median) {
                        raster_data[i].median = raster_data[i].median.toFixed(2);
                    }
                }
                $(function () {
                    $('#rasterdata2').bootstrapTable('destroy').bootstrapTable({
                        data: raster_data,
                        iconSize: "sm",
                        exportOptions: {
                            preventInjection: false
                        }
                    });
                    $('#rasterdata2').bootstrapTable('load', raster_data);
                })
            },
            error: function () {
                console.log('Error TableRasters');
            }
        });
    }

    function Table3(Id, SubParameter, Decade, RCP, Dates, Months) {
        $('#table3title').text($("#chart3SubParameter option:selected ").text() + ' (' + $("#chart3Decade option:selected").text() + '/' + $("#chart3RCP option:selected").text() + ')');
        $.ajax({
            url: '@Url.Action("GetTable3")',
            data: {
                Id: Id,
                SubParameter: SubParameter,
                Decade: Decade,
                RCP: RCP,
                Dates: Dates,
                Months: Months
            },
            //async: false,
            type: 'POST',
            success: function (data) {
                raster_data = data.raster_table_for_chart_bs;
                for (var i = 0; i < raster_data.length; ++i) {
                    if (raster_data[i].max) {
                        raster_data[i].max = raster_data[i].max.toFixed(2);
                    }
                    if (raster_data[i].min) {
                        raster_data[i].min = raster_data[i].min.toFixed(2);
                    }
                    if (raster_data[i].median) {
                        raster_data[i].median = raster_data[i].median.toFixed(2);
                    }
                }
                $(function () {
                    $('#rasterdata3').bootstrapTable('destroy').bootstrapTable({
                        data: raster_data,
                        iconSize: "sm",
                        exportOptions: {
                            preventInjection: false
                        }
                    });
                    $('#rasterdata3').bootstrapTable('load', raster_data);
                })
            },
            error: function () {
                console.log('Error TableRasters');
            }
        });
    }
</script>

@* wms *@
<script>
    var wms = new Array();
    @{
        List<wm> wms = ViewBag.wms;
        foreach(wm wm_ in wms)
        {
            @:var wms_new = {};
            @:wms_new["objectid"] = '@Html.Raw(wm_.objectid)';
            @:wms_new["codewmb"] = '@Html.Raw(wm_.codewmb)';
            @:wms_new["namewmb_ru"] = '@Html.Raw(wm_.namewmb_ru)';
            @:wms_new["codewma"] = '@Html.Raw(wm_.codewma)';
            @:wms.push(wms_new);
        }
    }
    $.each(wms, function () {
        if (this.objectid == @ViewBag.Id) {
            $("#wmb").append($("<option selected />").val(this.codewmb).text(this.namewmb_ru));
        }
        else if ($("#wmb option[value='" + this.codewmb + "']").length == 0) {
            if (this.namewmb_ru.length > 0) {
                $("#wmb").append($("<option />").val(this.codewmb).text(this.namewmb_ru));
            }
        }
    });

    $.each(wms, function () {
        if (this.objectid == @ViewBag.Id) {
            $("#wma").append($("<option selected />").val(this.objectid).text(this.codewma));
        }
        if ($("#wma option[value='" + this.codewma + "']").length == 0) {
            if (this.codewma.length > 0) {
                if (this.codewmb == $('#wmb').val()) {
                    $("#wma").append($("<option />").val(this.objectid).text(this.codewma));
                }
            }
        }
    });

    function ChangeWMB() {
        $('#wma').html('');
        $.each(wms, function () {
            if ($("#wma option[value='" + this.codewma + "']").length == 0) {
                if (this.codewma.length > 0) {
                    if (this.codewmb == $('#wmb').val()) {
                        $("#wma").append($("<option />").val(this.objectid).text(this.codewma));
                    }
                }
            }
        });
        NavigateToWMA();
        RefreshWMS();
    }

    function RefreshWMS() {
        Chart1($("#wma").val());
        Chart2($("#wma").val());
        Chart3($("#wma").val());
    }
</script>

<script>
    $(function () {
        $('#navigation').navpoints({ offset: 70 });
    });
    $(document).ready(function () {
        Chart1();
        Chart2();
        Chart3();
        //Table1($("#CoordX").val(), $("#CoordY").val());
    });
    //$(function () {
    //    $('.selectpicker').selectpicker();
    //});
</script>

@* maps *@
<script>
    var geoserver_url = "@ViewBag.GeoServerUrl",
        geoserver_workspace_name = "climate";

    var urlTpl = 'https://{1-4}.{base}.maps.cit.api.here.com' +
        '/{type}/2.1/maptile/newest/{scheme}/{z}/{x}/{y}/256/png' +
        '?app_id={app_id}&app_code={app_code}';
    function HEREcreateUrl(tpl, HERElayerDesc) {
        return tpl
            .replace('{base}', HERElayerDesc.base)
            .replace('{type}', HERElayerDesc.type)
            .replace('{scheme}', HERElayerDesc.scheme)
            .replace('{app_id}', HERElayerDesc.app_id)
            .replace('{app_code}', HERElayerDesc.app_code);
    };
    var HEREappId = 'SLdBasp4s1oq2oUbVGxy';
    var HEREappCode = 'D9-h9iVhjgUB_9eUlFETXA';
    var HERElayerDescHybridDay = {
        base: 'aerial',
        type: 'maptile',
        scheme: 'hybrid.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HEREHybridDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescHybridDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' + '<a href="http://developer.here.com">HERE</a>'
    });

    var Layer_Base = new ol.layer.Tile({
        source: Source_HEREHybridDay
    });
    Layer_Base.set('name', 'Base');
    Layer_Base.setOpacity(0.80);

    var Layer_Climate1 = new ol.layer.Tile({
        source: null
    });
    Layer_Climate1.set('name', 'Climate');
    Layer_Climate1.setOpacity(0.80);

    var Layer_Climate2 = new ol.layer.Tile({
        source: null
    });
    Layer_Climate2.set('name', 'Climate');
    Layer_Climate2.setOpacity(0.80);

    var url_wma_polygon = geoserver_url + 'geonode' + '/wms';

    var Source_wma_polygon1 = new ol.source.TileWMS({
        url: url_wma_polygon,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            "LAYERS": 'geonode:wma_polygon',
            "exceptions": 'application/vnd.ogc.se_inimage',
            tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
        },
        serverType: 'geoserver'
    });
    var Layer_wma_polygon1 = new ol.layer.Tile({
        source: Source_wma_polygon1
    });
    Layer_wma_polygon1.set('name', 'wma_polygon');
    Layer_wma_polygon1.setOpacity(0.80);

    var Source_wma_polygon2 = new ol.source.TileWMS({
        url: url_wma_polygon,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            "LAYERS": 'geonode:wma_polygon',
            "exceptions": 'application/vnd.ogc.se_inimage',
            tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
        },
        serverType: 'geoserver'
    });
    var Layer_wma_polygon2 = new ol.layer.Tile({
        source: Source_wma_polygon2
    });
    Layer_wma_polygon2.set('name', 'wma_polygon');
    Layer_wma_polygon2.setOpacity(0.80);

    var Layer_wma_polygon_Navigate1 = new ol.layer.Vector({
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: 'transparent'
            }),
            stroke: new ol.style.Stroke({
                color: 'red',
                width: 4
            })
        })
    });
    Layer_wma_polygon_Navigate1.set('name', 'wma_polygonnavigate');

    var Layer_wma_polygon_Navigate2 = new ol.layer.Vector({
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: 'transparent'
            }),
            stroke: new ol.style.Stroke({
                color: 'red',
                width: 4
            })
        })
    });
    Layer_wma_polygon_Navigate2.set('name', 'wma_polygonnavigate');

    // popup
    var container1 = document.getElementById('popup1');
    var content1 = document.getElementById('popup-content1');
    var closer1 = document.getElementById('popup-closer1');
    var overlay1 = new ol.Overlay({
        element: container1,
        autoPan: true,
        autoPanAnimation: {
            duration: 250
        }
    });
    closer1.onclick = function () {
        overlay1.setPosition(undefined);
        closer1.blur();
        return false;
    };

    var container2 = document.getElementById('popup2');
    var content2 = document.getElementById('popup-content2');
    var closer2 = document.getElementById('popup-closer2');
    var overlay2 = new ol.Overlay({
        element: container2,
        autoPan: true,
        autoPanAnimation: {
            duration: 250
        }
    });
    closer2.onclick = function () {
        overlay2.setPosition(undefined);
        closer2.blur();
        return false;
    };

    var map1 = new ol.Map({
        target: 'map1',
        controls: new ol.control.defaults({ attributionOptions: { collapsible: true } }).extend([
            new ol.control.ScaleLine()
        ]),
        layers: [
            Layer_Base,
            Layer_Climate1,
            Layer_wma_polygon1
        ],
        overlays: [overlay1],
        view: new ol.View({
            center: ol.proj.fromLonLat([66.902, 48.714]),
            zoom: 4,
            minZoom: 4,
            extent: [5028944.964937042, 4754994.655562972, 10214432.963802021, 7494497.74930296]
        })
    });

    var map2 = new ol.Map({
        target: 'map2',
        controls: new ol.control.defaults({ attributionOptions: { collapsible: true } }).extend([
            new ol.control.ScaleLine()
        ]),
        layers: [
            Layer_Base,
            Layer_Climate2,
            Layer_wma_polygon2
        ],
        overlays: [overlay2],
        view: new ol.View({
            center: ol.proj.fromLonLat([66.902, 48.714]),
            zoom: 4,
            minZoom: 4,
            extent: [5028944.964937042, 4754994.655562972, 10214432.963802021, 7494497.74930296]
        })
    });
</script>

@* map.on('singleclick') *@
<script>
    map1.on('singleclick', function (evt) {
        var viewResolution = (map1.getView().getResolution());
        var url_Climate = Layer_Climate1.getSource().getGetFeatureInfoUrl(
            evt.coordinate, viewResolution, 'EPSG:3857',
            {
                'INFO_FORMAT': 'text/javascript'
            });
        if (url_Climate) {
            var parser = new ol.format.GeoJSON();
            $.ajax({
                url: url_Climate,
                dataType: 'jsonp',
                jsonpCallback: 'parseResponse',
                error: function (xhr, status, error) {
                }
            }).then(function (response) {
                var result = parser.readFeatures(response);
                if (result.length) {
                    var hdms = ol.coordinate.toStringHDMS(ol.proj.toLonLat(evt.coordinate));
                    content1.innerHTML = '<p>' + hdms + '</p><code>' + result[0].get('GRAY_INDEX').toFixed(2) + '</code>';
                    overlay1.setPosition(evt.coordinate);
                }
            })
        }
    });

    map2.on('singleclick', function (evt) {
        var viewResolution = (map2.getView().getResolution());
        var url_Climate = Layer_Climate2.getSource().getGetFeatureInfoUrl(
            evt.coordinate, viewResolution, 'EPSG:3857',
            {
                'INFO_FORMAT': 'text/javascript'
            });
        if (url_Climate) {
            var parser = new ol.format.GeoJSON();
            $.ajax({
                url: url_Climate,
                dataType: 'jsonp',
                jsonpCallback: 'parseResponse',
                error: function (xhr, status, error) {
                }
            }).then(function (response) {
                var result = parser.readFeatures(response);
                if (result.length) {
                    var hdms = ol.coordinate.toStringHDMS(ol.proj.toLonLat(evt.coordinate));
                    content2.innerHTML = '<p>' + hdms + '</p><code>' + result[0].get('GRAY_INDEX').toFixed(2) + '</code>';
                    overlay2.setPosition(evt.coordinate);
                }
            })
        }
    });
</script>

@* map.on('moveend') *@
<script>
    map1.on('moveend', function (evt) {
        var zoom = map1.getView().getZoom();
        var center = map1.getView().getCenter();
        map2.getView().setZoom(zoom);
        map2.getView().setCenter(center);
    });

    map2.on('moveend', function (evt) {
        var zoom = map2.getView().getZoom();
        var center = map2.getView().getCenter();
        map1.getView().setZoom(zoom);
        map1.getView().setCenter(center);
    });
</script>

@* NavigateToWMA *@
<script>
    var first_wma_polygon_Navigate1 = true,
        first_wma_polygon_Navigate2 = true;

    function NavigateToWMA() {
        var wma_code = $("#wma option:selected").text();
        var filter = "CodeWMA = '" + wma_code + "'";
        var filterParams = {
            'FILTER': null,
            'CQL_FILTER': null,
            'FEATUREID': null
        };
        if (filter.replace(/^\s\s*/, '').replace(/\s\s*$/, '') != "") {
            filterParams["CQL_FILTER"] = filter;
        }
        url_wma_polygon_Navigate = geoserver_url + 'geonode' + "/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=geonode:wma_polygon&CQL_FILTER=" + filter + "&outputFormat=text/javascript&format_options=callback:getJson";

        if (Layer_wma_polygon_Navigate1.getSource() != null) {
            Layer_wma_polygon_Navigate1.getSource().clear();
        }
        if (Layer_wma_polygon_Navigate2.getSource() != null) {
            Layer_wma_polygon_Navigate2.getSource().clear();
        }
        $.ajax({
            jsonp: false,
            jsonpCallback: 'getJson',
            type: 'GET',
            url: url_wma_polygon_Navigate,
            async: false,
            dataType: 'jsonp',
            success: function (data_wma_polygon_Navigate) {
                var new_source1 = new ol.source.Vector({
                    features: (new ol.format.GeoJSON()).readFeatures(data_wma_polygon_Navigate, {
                        featureProjection: 'EPSG:3857'
                    })
                });
                Layer_wma_polygon_Navigate1.setSource(new_source1);
                map1.getView().fit(Layer_wma_polygon_Navigate1.getSource().getExtent());
                if (first_wma_polygon_Navigate1) {
                    map1.addLayer(Layer_wma_polygon_Navigate1);
                    first_wma_polygon_Navigate1 = false;
                }

                var new_source2 = new ol.source.Vector({
                    features: (new ol.format.GeoJSON()).readFeatures(data_wma_polygon_Navigate, {
                        featureProjection: 'EPSG:3857'
                    })
                });
                Layer_wma_polygon_Navigate2.setSource(new_source2);
                map2.getView().fit(Layer_wma_polygon_Navigate2.getSource().getExtent());
                if (first_wma_polygon_Navigate2) {
                    map2.addLayer(Layer_wma_polygon_Navigate2);
                    first_wma_polygon_Navigate2 = false;
                }
            }
        });
    }
</script>

@* ChangeLayerClimate *@
<script>
    function ChangeLayerClimate1() {
        var SubParameter = $('#SubParameter1').val(),
            Period = $('#Period1').val(),
            RCP = $('#RCP1').val(),
            Decade = $('#Decade').val(),
            Season = ''/*$('#Season1').val()*/,
            Month = ''/*$('#Month1').val()*/;
        if (Period.length == 1 && Period != 'y') {
            Season = Period;
            Period = 's';
        }
        else if (Period.length == 2) {
            Month = Period;
            Period = 'm';
        }

        var layerClimate = '';

        // Отклонения осадков в мм
        if (SubParameter == 'pr_dlt_avg_mm') {
            var SubParameter_ = SubParameter.substr(0, SubParameter.length - 3);
            layerClimate = SubParameter_ + '_' + Period + '_' + RCP + '_' + Decade + '_' + 'mm';
        }
        else {
            layerClimate = SubParameter + '_' + Period + '_' + RCP + '_' + Decade;
        }

        //change legend
        if (SubParameter == 'tasmax_pd_avg' || SubParameter == 'tas_pd_avg' || SubParameter == 'tasmin_pd_avg') {
            $("#legend1").attr("src", "/esnow/img/legend/Temperature.svg");
        }
        else if (SubParameter == 'tasmax_dlt_avg' || SubParameter == 'tas_dlt_avg' || SubParameter == 'tasmin_dlt_avg') {
            $("#legend1").attr("src", "/esnow/img/legend/Delt_Temperature.svg");
        }
        else if (SubParameter == 'pr_pd_avg' && Period == 'y') {
            $("#legend1").attr("src", "/esnow/img/legend/Precipation_Year.svg");
        }
        else if (SubParameter == 'pr_pd_avg' && Period == 's') {
            $("#legend1").attr("src", "/esnow/img/legend/Precipation_Season.svg");
        }
        else if (SubParameter == 'pr_pd_avg' && Period == 'm') {
            $("#legend1").attr("src", "/esnow/img/legend/Precipation_Month.svg");
        }
        else if (SubParameter == 'pr_dlt_avg_mm' && Period == 'y') {
            $("#legend1").attr("src", "/esnow/img/legend/Delt_Precipation_Year.svg");
        }
        else if (SubParameter == 'pr_dlt_avg_mm' && Period == 's') {
            $("#legend1").attr("src", "/esnow/img/legend/Delt_Precipation_Season.svg");
        }
        else if (SubParameter == 'pr_dlt_avg_mm' && Period == 'm') {
            $("#legend1").attr("src", "/esnow/img/legend/Delt_Precipation_Month.svg");
        }
        else if (SubParameter == 'et_pd_avg' && Period == 'y') {
            $("#legend1").attr("src", "/esnow/img/legend/Evapotranspiration_Year.svg");
        }
        else if (SubParameter == 'et_pd_avg' && (Period == 'm' || Period == 's')) {
            $("#legend1").attr("src", "/esnow/img/legend/Evapotranspiration_Month.svg");
        }
        else if (SubParameter == 'et_dlt_avg' && Period == 'y') {
            $("#legend1").attr("src", "/esnow/img/legend/Evapotranspiration_Year_Dlt.svg");
        }
        else if (SubParameter == 'et_dlt_avg' && (Period == 'm' || Period == 's')) {
            $("#legend1").attr("src", "/esnow/img/legend/Evapotranspiration_Month_Dlt.svg");
        }

        $('#mapinfo1').text($('#ClimateTimeline').val().split(';')[0] + ' - ' + (parseInt($('#ClimateTimeline').val().split(';')[0]) + parseInt(Decade) - 1));

        var yearNumber = parseInt($('#ClimateTimeline').val().split(';')[0]);
        var date_str = yearNumber;
        if (Period == 'y') {
            date_str += '-01-01';
            $('.seasons1').hide();
            $('.months1').hide();
        }
        if (Period == 's') {
            $('.seasons1').show();
            $('.months1').hide();
            // эвапотранспорация
            if (SubParameter == 'et_pd_avg' || SubParameter == 'et_dlt_avg') {
                if (Season == 4) {
                    date_str += '-01-01';
                }
                else if (Season == 1) {
                    date_str += '-03-01';
                }
                else if (Season == 2) {
                    date_str += '-06-01';
                }
                else if (Season == 3) {
                    date_str += '-09-01';
                }
            }
            else {
                date_str += '-0' + Season + '-01';
            }
        }
        if (Period == 'm') {
            $('.seasons1').hide();
            $('.months1').show();
            date_str += '-' + Month + '-01';
        }

        var Source_Climate_New = new ol.source.TileWMS({
            url: geoserver_url + geoserver_workspace_name + '/wms?' + 'time=' + date_str + '&',
            params: {
                'FORMAT': 'image/png',
                'VERSION': '1.1.1',
                tiled: true,
                "LAYERS": geoserver_workspace_name + ':' + layerClimate,
                "exceptions": 'application/vnd.ogc.se_inimage',
                tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
            },
            serverType: 'geoserver'
        });
        Layer_Climate1.setSource(Source_Climate_New);
    }

    function ChangeLayerClimate2() {
        var SubParameter = $('#SubParameter2').val(),
            Period = $('#Period2').val(),
            RCP = $('#RCP2').val(),
            Decade = $('#Decade').val(),
            Season = ''/*$('#Season2').val()*/,
            Month = ''/*$('#Month2').val()*/;
        if (Period.length == 1 && Period != 'y') {
            Season = Period;
            Period = 's';
        }
        else if (Period.length == 2) {
            Month = Period;
            Period = 'm';
        }

        var layerClimate = '';

        // Отклонения осадков в мм
        if (SubParameter == 'pr_dlt_avg_mm') {
            var SubParameter_ = SubParameter.substr(0, SubParameter.length - 3);
            layerClimate = SubParameter_ + '_' + Period + '_' + RCP + '_' + Decade + '_' + 'mm';
        }
        else {
            layerClimate = SubParameter + '_' + Period + '_' + RCP + '_' + Decade;
        }

        //change legend
        if (SubParameter == 'tasmax_pd_avg' || SubParameter == 'tas_pd_avg' || SubParameter == 'tasmin_pd_avg') {
            $("#legend2").attr("src", "/esnow/img/legend/Temperature.svg");
        }
        else if (SubParameter == 'tasmax_dlt_avg' || SubParameter == 'tas_dlt_avg' || SubParameter == 'tasmin_dlt_avg') {
            $("#legend2").attr("src", "/esnow/img/legend/Delt_Temperature.svg");
        }
        else if (SubParameter == 'pr_pd_avg' && Period == 'y') {
            $("#legend2").attr("src", "/esnow/img/legend/Precipation_Year.svg");
        }
        else if (SubParameter == 'pr_pd_avg' && Period == 's') {
            $("#legend2").attr("src", "/esnow/img/legend/Precipation_Season.svg");
        }
        else if (SubParameter == 'pr_pd_avg' && Period == 'm') {
            $("#legend2").attr("src", "/esnow/img/legend/Precipation_Month.svg");
        }
        else if (SubParameter == 'pr_dlt_avg_mm' && Period == 'y') {
            $("#legend2").attr("src", "/esnow/img/legend/Delt_Precipation_Year.svg");
        }
        else if (SubParameter == 'pr_dlt_avg_mm' && Period == 's') {
            $("#legend2").attr("src", "/esnow/img/legend/Delt_Precipation_Season.svg");
        }
        else if (SubParameter == 'pr_dlt_avg_mm' && Period == 'm') {
            $("#legend2").attr("src", "/esnow/img/legend/Delt_Precipation_Month.svg");
        }
        else if (SubParameter == 'et_pd_avg' && Period == 'y') {
            $("#legend2").attr("src", "/esnow/img/legend/Evapotranspiration_Year.svg");
        }
        else if (SubParameter == 'et_pd_avg' && (Period == 'm' || Period == 's')) {
            $("#legend2").attr("src", "/esnow/img/legend/Evapotranspiration_Month.svg");
        }
        else if (SubParameter == 'et_dlt_avg' && Period == 'y') {
            $("#legend2").attr("src", "/esnow/img/legend/Evapotranspiration_Year_Dlt.svg");
        }
        else if (SubParameter == 'et_dlt_avg' && (Period == 'm' || Period == 's')) {
            $("#legend2").attr("src", "/esnow/img/legend/Evapotranspiration_Month_Dlt.svg");
        }

        $('#mapinfo2').text($('#ClimateTimeline').val().split(';')[0] + ' - ' + (parseInt($('#ClimateTimeline').val().split(';')[0]) + parseInt(Decade) - 1));

        var yearNumber = parseInt($('#ClimateTimeline').val().split(';')[0]);
        var date_str = yearNumber;
        if (Period == 'y') {
            date_str += '-01-01';
            $('.seasons2').hide();
            $('.months2').hide();
        }
        if (Period == 's') {
            $('.seasons2').show();
            $('.months2').hide();
            // эвапотранспорация
            if (SubParameter == 'et_pd_avg' || SubParameter == 'et_dlt_avg') {
                if (Season == 4) {
                    date_str += '-01-01';
                }
                else if (Season == 1) {
                    date_str += '-03-01';
                }
                else if (Season == 2) {
                    date_str += '-06-01';
                }
                else if (Season == 3) {
                    date_str += '-09-01';
                }
            }
            else {
                date_str += '-0' + Season + '-01';
            }
        }
        if (Period == 'm') {
            $('.seasons2').hide();
            $('.months2').show();
            date_str += '-' + Month + '-01';
        }

        var Source_Climate_New = new ol.source.TileWMS({
            url: geoserver_url + geoserver_workspace_name + '/wms?' + 'time=' + date_str + '&',
            params: {
                'FORMAT': 'image/png',
                'VERSION': '1.1.1',
                tiled: true,
                "LAYERS": geoserver_workspace_name + ':' + layerClimate,
                "exceptions": 'application/vnd.ogc.se_inimage',
                tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
            },
            serverType: 'geoserver'
        });
        Layer_Climate2.setSource(Source_Climate_New);
    }
</script>


@*for RangeSlaider*@
<script>
    var slider_first = true;
    var years10values = [1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100];
    var min = Math.min(...years10values),
        max = Math.max(...years10values),
        step = 10,
        Decade = $('#Decade').val();

    var from = min + 1,
        to = from + parseInt(Decade) - 1;
    var range_instance = null;
    var $ClimateTimeline = $(".js-range-slider");
    $btn_minus = $("#MinusBtn"),
        $btn_plus = $("#PlusBtn"),
        $btn_play_pause = $("#PlayPauseBtn");

    function CreateDateSlider() {
        Decade = $('#Decade').val();
        to = from + parseInt(Decade) - 1;
        if (slider_first) {
            $("#ClimateTimeline").ionRangeSlider({
                skin: "round",
                type: "double",
                grid: true,
                grid_snap: true,
                min: min,
                max: max,
                step: step,
                from: from,
                to: to,
                min_interval: parseInt(Decade) - 1,
                max_interval: parseInt(Decade) - 1,
                drag_interval: true,
                prettify_enabled: false,
                onFinish: function (data) {
                    from = data.from + 1;
                    to = data.to;
                    if (+to.toString().split('').pop() != 0) {
                        to = to + 1;
                    }
                    range_instance.update({
                        step: step,
                        from: from,
                        to: to
                    });

                    ChangeDate();
                    ChangeLayerClimate1();
                    ChangeLayerClimate2();
                },
                onChange: function (data) {
                    // Called every time handle position is changed
                    if (data.from == data.to) {
                        data.to = data.to + 10;
                    }
                },
                onStart: function (data) {
                    //onStart
                },
                onUpdate: function (data) {
                    //onUpdate
                }
            });

            slider_first = false;

            $btn_minus.on("click", function () {
                updateRange(-1);
                ChangeDate();
                ChangeLayerClimate1();
                ChangeLayerClimate2();
            });

            $btn_plus.on("click", function () {
                updateRange(1);
                ChangeDate();
                ChangeLayerClimate1();
                ChangeLayerClimate2();
            });

            $btn_play_pause.on("click", function () {
                var child_play_pause = $btn_play_pause[0].childNodes[0];
                if ($(child_play_pause).hasClass("fa-play-circle")) {
                    $(child_play_pause).removeClass("fa-play-circle");
                    $(child_play_pause).addClass("fa-pause-circle");
                    var i = years10values.indexOf(from - 1);
                    var end = years10values.length - 1;
                    if (Decade == 20) {
                        end = end - 1;
                    }
                    if (Decade == 30) {
                        end = end - 2;
                    }
                    i++;
                    (function () {
                        if (i < end && $(child_play_pause).hasClass("fa-pause-circle")) {
                            updateRange(1);
                            ChangeDate();
                            ChangeLayerClimate1();
                            ChangeLayerClimate2();
                            i++;
                            setTimeout(arguments.callee, 4000);
                        }
                        else {
                            $(child_play_pause).removeClass("fa-pause-circle");
                            $(child_play_pause).addClass("fa-play-circle");
                        }
                    })();
                }
                else {
                    $(child_play_pause).removeClass("fa-pause-circle");
                    $(child_play_pause).addClass("fa-play-circle");
                }
            });
        }

        range_instance = $ClimateTimeline.data("ionRangeSlider");

        range_instance.update({
            min: min,
            max: max,
            step: step,
            from: from,
            to: to,
            min_interval: parseInt(Decade) - 1,
            max_interval: parseInt(Decade) - 1,
        });

        var updateRange = function (direction) {
            if (direction == 1) {
                if (to + step * direction <= max) {
                    from += step * direction;
                    to += step * direction;
                }
            }

            if (direction == -1) {
                if (from + step * direction >= min) {
                    from += step * direction;
                    to += step * direction;
                }
            }

            range_instance.update({
                min: min,
                max: max,
                step: step,
                from: from,
                to: to
            });
        };

        ChangeLayerClimate1();
        ChangeLayerClimate2();
    }

    function ChangeDate() {
        $('#mapinfo1').text($('#ClimateTimeline').val().split(';')[0] + ' - ' + (parseInt($('#ClimateTimeline').val().split(';')[0]) + parseInt(Decade) - 1));
        $('#mapinfo2').text($('#ClimateTimeline').val().split(';')[0] + ' - ' + (parseInt($('#ClimateTimeline').val().split(';')[0]) + parseInt(Decade) - 1));
    }
</script>

@* Chart1Show, Chart2Show, Chart3Show *@
<script>
    function Chart1Show() {
        $('#chartbody1').show();
        $('#chartbody2').hide();
        $('#chartbody3').hide();
    }
    function Chart2Show() {
        $('#chartbody1').hide();
        $('#chartbody2').show();
        $('#chartbody3').hide();
    }
    function Chart3Show() {
        $('#chartbody1').hide();
        $('#chartbody2').hide();
        $('#chartbody3').show();
    }
</script>

@* Table1Show, Table2Show, Table3Show *@
<script>
    function Table1Show() {
        $('#table1').show();
        $('#table2').hide();
        $('#table3').hide();
    }
    function Table2Show() {
        $('#table1').hide();
        $('#table2').show();
        $('#table3').hide();
    }
    function Table3Show() {
        $('#table1').hide();
        $('#table2').hide();
        $('#table3').show();
    }
</script>

@* TabClick, ChartTableShow *@
<script>
    function TabClick(el) {
        var id = $(el).attr('id');
        if (id == "charts-tab" && $("#tables-tab").hasClass("active") == true) {
            $("#tables-tab").removeClass("active");
            $("#charts-tab").addClass("active");
            ChartTableShow();
        }
        if (id == "tables-tab" && $("#charts-tab").hasClass("active") == true) {
            $("#charts-tab").removeClass("active");
            $("#tables-tab").addClass("active");
            ChartTableShow();
        }
    }

    function ChartTableShow() {
        if ($("#charts-tab").hasClass("active") == true) {
            $('#charts').show();
            $('#tables').hide();
        }
        if ($("#tables-tab").hasClass("active") == true) {
            $('#charts').hide();
            $('#tables').show();
        }
    }
</script>

@* ShowMax *@
<script>
    function ShowMax() {
        for (var i = 0; i < chart1.data.datasets.length; ++i) {
            if (chart1.data.datasets[i].label.toLowerCase().includes('максимум')) {
                chart1.data.datasets[i].hidden = false;
            }
            else {
                chart1.data.datasets[i].hidden = true;
            }
        }
        chart1.update();

        for (var i = 0; i < chart2.data.datasets.length; ++i) {
            if (chart2.data.datasets[i].label.toLowerCase().includes('максимум')) {
                chart2.data.datasets[i].hidden = false;
            }
            else {
                chart2.data.datasets[i].hidden = true;
            }
        }
        chart2.update();

        for (var i = 0; i < chart3.data.datasets.length; ++i) {
            if (chart3.data.datasets[i].label.toLowerCase().includes('максимум')) {
                chart3.data.datasets[i].hidden = false;
            }
            else {
                chart3.data.datasets[i].hidden = true;
            }
        }
        chart3.update();
    }

    function ShowMin() {
        for (var i = 0; i < chart1.data.datasets.length; ++i) {
            if (chart1.data.datasets[i].label.toLowerCase().includes('минимум')) {
                chart1.data.datasets[i].hidden = false;
            }
            else {
                chart1.data.datasets[i].hidden = true;
            }
        }
        chart1.update();

        for (var i = 0; i < chart2.data.datasets.length; ++i) {
            if (chart2.data.datasets[i].label.toLowerCase().includes('минимум')) {
                chart2.data.datasets[i].hidden = false;
            }
            else {
                chart2.data.datasets[i].hidden = true;
            }
        }
        chart2.update();

        for (var i = 0; i < chart3.data.datasets.length; ++i) {
            if (chart3.data.datasets[i].label.toLowerCase().includes('минимум')) {
                chart3.data.datasets[i].hidden = false;
            }
            else {
                chart3.data.datasets[i].hidden = true;
            }
        }
        chart3.update();
    }

    function ShowMedian() {
        for (var i = 0; i < chart1.data.datasets.length; ++i) {
            if (chart1.data.datasets[i].label.toLowerCase().includes('медиана')) {
                chart1.data.datasets[i].hidden = false;
            }
            else {
                chart1.data.datasets[i].hidden = true;
            }
        }
        chart1.update();

        for (var i = 0; i < chart2.data.datasets.length; ++i) {
            if (chart2.data.datasets[i].label.toLowerCase().includes('медиана')) {
                chart2.data.datasets[i].hidden = false;
            }
            else {
                chart2.data.datasets[i].hidden = true;
            }
        }
        chart2.update();

        for (var i = 0; i < chart3.data.datasets.length; ++i) {
            if (chart3.data.datasets[i].label.toLowerCase().includes('медиана')) {
                chart3.data.datasets[i].hidden = false;
            }
            else {
                chart3.data.datasets[i].hidden = true;
            }
        }
        chart3.update();
    }
</script>

<script>
    var yearlabels = [1951, 1961, 1971, 1981, 1991, 2001, 2011, 2021, 2031, 2041, 2051, 2061, 2071, 2081, 2091, 2101];
    var seasonlabels = ['1951 весна', '1951  лето', '1951  осень', '1951  зима', '1961 весна', '1961  лето', '1961  осень', '1961  зима', '1970 весна', '1970  лето', '1970  осень', '1970  зима', '1981 весна', '1981  лето', '1981  осень', '1981  зима', '1991 весна', '1991  лето', '1991  осень', '1991  зима', '2001 весна', '2001  лето', '2001  осень', '2001  зима', '2011 весна', '2011  лето', '2011  осень', '2011  зима', '2021 весна', '2021  лето', '2021  осень', '2021  зима', '2031 весна', '2031  лето', '2031  осень', '2031  зима', '2041 весна', '2041  лето', '2041  осень', '2041  зима', '2051 весна', '2051  лето', '2051  осень', '2051  зима', '2061 весна', '2061  лето', '2061  осень', '2061  зима', '2071 весна', '2071  лето', '2071  осень', '2071  зима', '2081 весна', '2081  лето', '2081  осень', '2081  зима', '2091 весна', '2091  лето', '2091  осень', '2091  зима', '2101весна', '2101  лето', '2101  осень', '2101  зима'];
    var chartDates10Med = [15.22, 15.18, 15.46, 15.50, 15.55, 15.59, NaN, 15.85, 16.02, 16.05, 16.10, 16.22, 16.25, 19.07, 16.33, 16.25];
    var chartSeasonDates10Med = [12.22, 12.18, 12.46, 12.50, 12.55, 12.59, NaN, 12.85, 12.02, 13.05, 13.10, 13.22, 13.25, 13.07, 13.33, 13.25, 16.22, 16.18, 16.46, 16.50, 16.55, NaN, NaN, 16.85, 16.02, 16.05, 16.10, 16.22, 16.25, 19.07, 16.33, 16.25, 15.22, 15.18, 15.46, 15.50, 15.55, 15.59, NaN, 15.85, 16.02, 16.05, 16.10, 16.22, 16.25, 19.07, 16.33, 16.25, 13.22, 13.18, 13.46, 13.50, 13.55, NaN, NaN, 13.85, 13.02, 13.05, 13.10, 13.22, 13.25, 13.07, 13.33, 13.25];
    var chartDates10Max = [16.22, 16.18, 16.46, 16.50, 16.55, NaN, NaN, 16.85, 16.02, 16.05, 16.10, 16.22, 16.25, 19.07, 16.33, 16.25];
    var chartDates10Min = [13.22, 13.18, 13.46, 13.50, 13.55, NaN, NaN, 13.85, 13.02, 13.05, 13.10, 13.22, 13.25, 13.07, 13.33, 13.25];
    var ctx = document.getElementById('myChart').getContext('2d');
    var chart = new Chart(ctx, {
        // The type of chart we want to create
        type: 'bar',
        // The data for our dataset
        data: {
            labels: yearlabels,
            datasets: [{
                label: 'Медиана',
                backgroundColor: "rgba(75, 192, 192, 0.5)",
                borderColor: "rgba(75, 192, 192,1)",
                borderWidth: 1,
                data: chartDates10Med
            }]
        },
        // Configuration options go here
        options: {
            legend: {
                display: true,
                position: 'bottom'
            }
            //scales: {
            //    xAxes: [{
            //        stacked: true
            //    }],
            //    yAxes: [{
            //        stacked: true
            //    }]
            //}
        },
    });
    function updateChart10() {
        chart.data.labels = yearlabels
        chart.data.datasets[0].data = chartDates10Med;
        chart.update();
    };
    function updateChart20() {
        chart.data.datasets[0].data = chartSeasonDates10Med;
        chart.data.labels = seasonlabels
        chart.update();
    };
    function addValueMax() {
        chart.data.datasets.push({
            label: 'Максимум',
            backgroundColor: 'rgba(255, 99, 132, 0.5)',
            borderColor: 'rgba(255,99,132,1)',
            borderWidth: 1,
            data: chartDates10Max
        }),
            chart.update();
    };
    function addValueMin() {
        chart.data.datasets.push({
            label: 'Минимум',
            backgroundColor: 'rgba(153, 102, 255, 0.5)',
            borderColor: 'rgba(153, 102, 255,1)',
            borderWidth: 1,
            data: chartDates10Min
        }),
            chart.update();
    };

</script>

@*test for ModalTable*@

<script>
    var raster_data = null;

    var $table = $('#rasterdata_old')

    $(function () {
        $table.bootstrapTable({
            iconSize: "sm"
        })

    })
    function idDetailMonth(index) {
        var content = '<div class="table-responsive">' + '<table class="table table-borderless">' + '<tr>'
            + '<th>' + '@SharedLocalizer["January"]' + '</th>'
            + '<th>' + '@SharedLocalizer["February"] ' + '</th>'
            + '<th>' + '@SharedLocalizer["March"]' + '</th>'
            + '<th>' + '@SharedLocalizer["April"] ' + '</th>'
            + '<th>' + '@SharedLocalizer["May"]' + '</th>'
            + '<th>' + '@SharedLocalizer["June"]' + '</th>'
            + '<th>' + '@SharedLocalizer["July"]' + '</th>'
            + '<th>' + '@SharedLocalizer["August"] ' + '</th>'
            + '<th>' + '@SharedLocalizer["September"]' + '</th>'
            + '<th>' + '@SharedLocalizer["October"] ' + '</th>'
            + '<th>' + '@SharedLocalizer["November"] ' + '</th>'
            + '<th>' + '@SharedLocalizer["December"]' + '</th>';
        return content += '<tr>'
            + '<td>' + parseFloat(raster_data[index].m1).toFixed(2) + '</td>'
            + '<td>' + parseFloat(raster_data[index].m2).toFixed(2) + '</td>'
            + '<td>' + parseFloat(raster_data[index].m3).toFixed(2) + '</td>'
            + '<td>' + parseFloat(raster_data[index].m4).toFixed(2) + '</td>'
            + '<td>' + parseFloat(raster_data[index].m5).toFixed(2) + '</td>'
            + '<td>' + parseFloat(raster_data[index].m6).toFixed(2) + '</td>'
            + '<td>' + parseFloat(raster_data[index].m7).toFixed(2) + '</td>'
            + '<td>' + parseFloat(raster_data[index].m8).toFixed(2) + '</td>'
            + '<td>' + parseFloat(raster_data[index].m9).toFixed(2) + '</td>'
            + '<td>' + parseFloat(raster_data[index].m10).toFixed(2) + '</td>'
            + '<td>' + parseFloat(raster_data[index].m11).toFixed(2) + '</td>'
            + '<td>' + parseFloat(raster_data[index].m12).toFixed(2) + '</td>'
            + '</tr>';
        //content += '</tr>' + '</table>' + '</div>';
    }
</script>

@* $(document).ready(function ()) { } *@
<script>
    $(document).ready(function () {
        Chart1Show();
        Table1Show();
        ChartTableShow();
        //ChangeLayerClimate1();
        //ChangeLayerClimate2();
        CreateDateSlider();
        NavigateToWMA();
    });
</script>