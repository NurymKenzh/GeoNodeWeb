@using GeoNodeWeb.Controllers
@{
    ViewData["Title"] = "Карта";
    Layout = "~/Views/Shared/_LayoutClimate.cshtml";
}
<link rel="stylesheet" href="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/css/ol.css" type="text/css">
<script src="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/build/ol.js"></script>
<script src="~/esnow/lib/moment.js/moment.js"></script>
<script src="~/esnow/lib/clim-sidebar/ClimSidebar.js"></script>
<script src="~/esnow/lib/jquery-ui/jquery-ui.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
<link href="~/esnow/css/site.css" rel="stylesheet" />
<link href="https://use.fontawesome.com/releases/v5.0.6/css/all.css" rel="stylesheet">

<link href="~/esnow/lib/rangeSlider/ion.rangeSlider.min.css" rel="stylesheet" />
<script src="~/esnow/lib/rangeSlider/ion.rangeSlider.min.js"></script>

<style>
    .ol-popup {
        position: absolute;
        background-color: white;
        -webkit-filter: drop-shadow(0 1px 4px rgba(0,0,0,0.2));
        filter: drop-shadow(0 1px 4px rgba(0,0,0,0.2));
        padding: 15px;
        border-radius: 10px;
        border: 1px solid #cccccc;
        bottom: 12px;
        left: -50px;
        min-width: 280px;
    }

        .ol-popup:after, .ol-popup:before {
            top: 100%;
            border: solid transparent;
            content: " ";
            height: 0;
            width: 0;
            position: absolute;
            pointer-events: none;
        }

        .ol-popup:after {
            border-top-color: white;
            border-width: 10px;
            left: 48px;
            margin-left: -10px;
        }

        .ol-popup:before {
            border-top-color: #cccccc;
            border-width: 11px;
            left: 48px;
            margin-left: -11px;
        }

    .ol-popup-closer {
        text-decoration: none;
        position: absolute;
        top: 2px;
        right: 8px;
    }

        .ol-popup-closer:after {
            content: "✖";
        }
</style>

<div class="container-fluid p-0">
    <div class="row">
        <main role="main" class="sticky-top">
            <div class="page-wrapper chiller-theme toggled">
                <a id="show-sidebar" class="btn btn-sm btn-info" href="#">
                    <i class="fa fa-bars"></i>
                </a>
                <nav id="sidebar" class="sidebar-wrapper border-right border-light">
                    <div class="sidebar-content">
                        <div class="sidebar-brand">
                            <a href="#">МЕНЮ</a>
                            <div id="close-sidebar">
                                <i class="fa fa-angle-double-left"></i>
                            </div>
                        </div>
                        <!-- sidebar-header  -->
                        <div class="sidebar-menu">
                            <ul>
                                <li class="header-menu mt-1">
                                    <span class="text-white-50">Периодичность</span>
                                </li>
                                <li class="header-menu">
                                    <div class="current_items">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="decade" id="decade10" value="10" checked onchange="ChangeDecade()">
                                            <label class="form-check-label" for="decade10">
                                                10 лет
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="decade" id="decade20" value="20" onchange="ChangeDecade()">
                                            <label class="form-check-label" for="decade20">
                                                20 лет
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="decade" id="decade30" value="30" onchange="ChangeDecade()">
                                            <label class="form-check-label" for="decade30">
                                                30 лет
                                            </label>
                                        </div>
                                    </div>
                                </li>
                                <li class="header-menu">
                                    <span class="text-white-50">RCP</span>
                                </li>
                                <li class="header-menu">
                                    <div class="current_items">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="RCP" id="RCP45" value="rcp45" checked onchange="ChangeRCP()">
                                            <label class="form-check-label" for="RCP45">
                                                rcp 4.5
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="RCP" id="RCP85" value="rcp85" onchange="ChangeRCP()">
                                            <label class="form-check-label" for="RCP85">
                                                rcp 8.5
                                            </label>
                                        </div>
                                    </div>
                                </li>
                                <li class="header-menu">
                                    <span class="text-white-50">Период</span>
                                </li>
                                <li class="header-menu">
                                    <div class="current_items">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Period" id="Year" value="10" checked onchange="ChangePeriod()">
                                            <label class="form-check-label" for="Year">
                                                Год
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Period" id="Season" value="20" onchange="ChangePeriod()">
                                            <label class="form-check-label" for="Season">
                                                Сезон
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Period" id="Month" value="30" onchange="ChangePeriod()">
                                            <label class="form-check-label" for="Month">
                                                Месяц
                                            </label>
                                        </div>
                                    </div>
                                </li>
                                <li class="header-menu Seasons">
                                    <span class="text-white-50">Сезоны</span>
                                </li>
                                <li class="header-menu Seasons">
                                    <div class="current_items">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Season" id="Season1" value="1" checked onchange="ChangeSeason()">
                                            <label class="form-check-label" for="Season1">
                                                Зима
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Season" id="Season2" value="2" onchange="ChangeSeason()">
                                            <label class="form-check-label" for="Season2">
                                                Весна
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Season" id="Season3" value="3" onchange="ChangeSeason()">
                                            <label class="form-check-label" for="Season3">
                                                Лето
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Season" id="Season4" value="4" onchange="ChangeSeason()">
                                            <label class="form-check-label" for="Season4">
                                                Осень
                                            </label>
                                        </div>
                                    </div>
                                </li>
                                <li class="header-menu Months">
                                    <span class="text-white-50">Месяцы</span>
                                </li>
                                <li class="header-menu Months">
                                    <div class="current_items">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Month" id="Month01" value="01" checked onchange="ChangeMonth()">
                                            <label class="form-check-label" for="Month01">
                                                Январь
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Month" id="Month02" value="02" onchange="ChangeMonth()">
                                            <label class="form-check-label" for="Month02">
                                                Февраль
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Month" id="Month03" value="03" onchange="ChangeMonth()">
                                            <label class="form-check-label" for="Month03">
                                                Март
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Month" id="Month04" value="04" onchange="ChangeMonth()">
                                            <label class="form-check-label" for="Month04">
                                                Апрель
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Month" id="Month05" value="05" onchange="ChangeMonth()">
                                            <label class="form-check-label" for="Month05">
                                                Май
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Month" id="Month06" value="06" onchange="ChangeMonth()">
                                            <label class="form-check-label" for="Month06">
                                                Июнь
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Month" id="Month07" value="07" onchange="ChangeMonth()">
                                            <label class="form-check-label" for="Month07">
                                                Июль
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Month" id="Month08" value="08" onchange="ChangeMonth()">
                                            <label class="form-check-label" for="Month08">
                                                Август
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Month" id="Month09" value="09" onchange="ChangeMonth()">
                                            <label class="form-check-label" for="Month09">
                                                Сентябрь
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Month" id="Month10" value="10" onchange="ChangeMonth()">
                                            <label class="form-check-label" for="Month10">
                                                Октябрь
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Month" id="Month11" value="11" onchange="ChangeMonth()">
                                            <label class="form-check-label" for="Month11">
                                                Ноябрь
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="Month" id="Month12" value="12" onchange="ChangeMonth()">
                                            <label class="form-check-label" for="Month12">
                                                Декабрь
                                            </label>
                                        </div>
                                    </div>
                                </li>
                                <li class="sidebar-dropdown">
                                    <a href="#">
                                        <i class="fa fa-globe" data-toggle="tooltip" data-placement="right" title="Tooltip on right"></i>
                                        <span>Слои</span>
                                    </a>
                                    <div class="sidebar-submenu">
                                        <ul>
                                            <li>
                                                <form>
                                                    <div class="form-row m-0 p-0">
                                                        <div class="col-11">
                                                            <input type="checkbox" id="layerriversShow" onchange="ChangeLayers()">
                                                            <label class="form-check-label text-white" for="layerrivers">
                                                                Реки
                                                            </label>
                                                            <input id="layerriversOpacity" type="range" class="form-control-range" min="0" max="100" value="80" oninput="ChangeLayers()" />

                                                            <input type="checkbox" id="layerlakesShow" onchange="ChangeLayers()">
                                                            <label class="form-check-label text-white" for="layerlakes">
                                                                Озера
                                                            </label>
                                                            <input id="layerlakesOpacity" type="range" class="form-control-range" min="0" max="100" value="80" oninput="ChangeLayers()" />

                                                            <input type="checkbox" id="layerwma_polygonShow" checked="checked" onchange="ChangeLayers()">
                                                            <label class="form-check-label text-white" for="layerwma_polygon">
                                                                ВХУ
                                                            </label>
                                                            <input id="layerwma_polygonOpacity" type="range" class="form-control-range" min="0" max="100" value="80" oninput="ChangeLayers()" />

                                                            <input type="checkbox" id="layerwmb_polygonShow" checked="checked" onchange="ChangeLayers()">
                                                            <label class="form-check-label text-white" for="layerwmb_polygon">
                                                                ВХБ
                                                            </label>
                                                            <input id="layerwmb_polygonOpacity" type="range" class="form-control-range" min="0" max="100" value="80" oninput="ChangeLayers()" />

                                                            <input type="checkbox" id="layerClimateShow" checked="checked" onchange="ChangeLayers()">
                                                            <label class="form-check-label text-white" for="layerClimateShow">
                                                                Климат
                                                            </label>
                                                            <input id="layerClimateOpacity" type="range" class="form-control-range" min="0" max="100" value="80" oninput="ChangeLayers()" />

                                                            <select id="layerBaseType" class="form-control form-control-sm" onchange="ChangeLayers()">
                                                                <option value="OSM">OpenStreetMap</option>
                                                                <option value="BingAerialWithLabels">Bing Aerial</option>
                                                                <option value="BingRoadStatic">Bing Road (static)</option>
                                                                <option value="BingRoadDynamic">Bing Road (dynamic)</option>
                                                                <option value="HERENormalDay">HERE Normal Day</option>
                                                                <option value="HERENormalDayTransit">HERE Normal Day Transit</option>
                                                                <option value="HERETerrainDay">HERE Terrain Day</option>
                                                                <option value="HEREHybridDay" selected>HERE Hybrid Day</option>
                                                                <option value="StamenWatercolor">Stamen Watercolor</option>
                                                                <option value="StamenTerrain">Stamen Terrain</option>
                                                                <option value="StamenToner">Stamen Toner</option>
                                                                <option value="ArcGIS">ArcGIS</option>
                                                                <option value="ThunderforestOpenCycleMap">Thunderforest OpenCycleMap</option>
                                                                <option value="ThunderforestTransport">Thunderforest Transport</option>
                                                                <option value="ThunderforestLandscape">Thunderforest Landscape</option>
                                                                <option value="ThunderforestOutdoors">Thunderforest Outdoors</option>
                                                                <option value="ThunderforestSpinalMap">Thunderforest Spinal Map</option>
                                                                <option value="ThunderforestPioneer">Thunderforest Pioneer</option>
                                                                <option value="ThunderforestMobileAtlas">Thunderforest Mobile Atlas</option>
                                                                <option value="ThunderforestNeighbourhood">Thunderforest Neighbourhood</option>
                                                            </select>
                                                            <input type="checkbox" id="layerBaseShow" checked="checked" onchange="ChangeLayers()">
                                                            <label class="form-check-label text-white" for="layerBaseShow">
                                                                Базовые слои
                                                            </label>
                                                            <input id="layerBaseOpacity" type="range" class="form-control-range" min="0" max="100" value="90" oninput="ChangeLayers()" />
                                                        </div>
                                                    </div>
                                                </form>
                                            </li>
                                        </ul>
                                    </div>
                                </li>
                                <li class="header-menu">
                                    <span class="text-white-50">Extra</span>
                                </li>
                                <li>
                                    <a href="#">
                                        <i class="fa fa-book" data-toggle="tooltip" data-placement="right" title="Tooltip on right"></i>
                                        <span>Documentation</span>
                                        <span class="badge badge-pill badge-primary">i</span>
                                    </a>
                                </li>
                            </ul>
                        </div>
                        <!-- sidebar-menu  -->
                    </div>
                    <!-- sidebar-content  -->
                    <div class="sidebar-footer border-bottom border-light">
                        <a href="#">
                            <i class="fa fa-file" data-toggle="tooltip" data-placement="top" title="Tooltip on top"></i>
                        </a>
                        <a href="#" OnClick="Charts()" id="ChartsButton" value="Выделять" onclick="Charts()">
                            <i class="fa fa-bar-chart-o" data-toggle="tooltip" data-placement="top" title="Для построение Графика, сначало выберите объект на карте (ВХБ или БХУ)"></i>
                        </a>
                        <a href="#" id="LegendHide">
                            <i class="fa fa-list-alt" data-toggle="tooltip" data-placement="top" title="Легенда"></i>
                        </a>
                        <a href="#" id="TitleHide" class="ui-state-default ui-corner-all">
                            <i class="fa fa-bookmark" data-toggle="tooltip" data-placement="top" title="Информация о слое"></i>
                        </a>
                    </div>
                </nav>
                <!-- sidebar-wrapper  -->

                <footer class="footer-classic fixed-bottom border-top border-light" style="background: #2d3246;">
                    <div class="container-fluid">
                        <div class="row align-items-center">
                            <div class="col-2">
                                <div class="col">
                                    <div class="input-group">
                                        <select id="type" class="measure custom-select">
                                            <option selected>Choose...</option>
                                            <option value="length">Длина (линия)</option>
                                            <option value="area">Площадь (полигон)</option>
                                        </select>
                                        <div class="input-group-append">
                                            <button id="MeasureButton" type="button" value="Измерять" class="btn btn-primary btn-sm" onclick="MeasureTool()">Измерять</button>
                                            <button id="SelectButton" type="button" value="Выделять" class="btn btn-primary btn-sm" onclick="SelectTool()">Выделять</button>                                            
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-8">
                                <div class="row align-items-center">
                                    <div class="col">
                                        <button type="button" class="btn btn-outline-warning btn-sm">Difference</button>
                                    </div>
                                    <div class="col-9 m-1 " style="cursor: pointer;">
                                        <input id="ClimateTimeline" class="js-range-slider" name="my_range" value="" />
                                    </div>
                                    <div class="col">
                                        <button id="MinusBtn" class="MinusBtn btn btn-outline-light btn-sm align-middle"><i class="fa fa-arrow-circle-left"></i></button>
                                        <button id="PlusBtn" class="PlusBtn btn btn-outline-light btn-sm"><i class="fa fa-arrow-circle-right"></i></button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-2">
                                <small class="text-light float-right">&copy; @DateTime.Now.Year.ToString() - GeoNode</small>
                            </div>
                        </div>

                    </div>
                </footer>
            </div>
        </main>
        <div id="map" class="position-fixed col-md-12 ml-sm-auto col-lg-12 p-0 bg-light" style="height: calc(100% - 127px);"></div>
        <div id="popup" class="ol-popup">
            <a href="#" id="popup-closer" class="ol-popup-closer"></a>
            <div id="popup-content"></div>
        </div>
    </div>
    <div class="row justify-content-end">
        <div id="MapTitle" class="card text-center text-white m-0 rounded-0 border-top-0 border-light" style="background: #3a465d;">
            <div class="card-body m-0 p-3">
                <h6 class="card-title m-0" id="InfoTitle" title="">Card title</h6>
                <p class="card-text" id="InfoInfo">Some quick example text</p>
                <p class="card-text" id="InfoYears">1951 - 21001</p>
            </div>
        </div>
    </div>
    <div id="Legend-2" class="card text-white m-0 rounded-0 border border-light" style="background: #3a465d;">
        <div class="card-body p-0">
            <img class="card-img-top" src="~/esnow/img/legend/Temperature.svg" alt="Temperature">
        </div>
    </div>
</div>

<input type="hidden" id="featureId" />
<input type="hidden" id="featureId" />

@* Layers, Measure, map *@
<script type="text/javascript">
    var geoserver_url = "@ViewBag.GeoServerUrl",
        geoserver_workspace_name = "climate";

    // Measure
    var Source_Measure = new ol.source.Vector();
    var Layer_Measure = new ol.layer.Vector({
        source: Source_Measure,
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: 'rgba(255, 255, 255, 0.2)'
            }),
            stroke: new ol.style.Stroke({
                color: '#ffcc33',
                width: 2
            }),
            image: new ol.style.Circle({
                radius: 7,
                fill: new ol.style.Fill({
                    color: '#ffcc33'
                })
            })
        })
    });
    var sketch;
    var helpTooltipElement = null;
    var helpTooltip = null;
    var measureTooltipElement;
    var measureTooltip;
    var continuePolygonMsg = 'Нажмите, чтобы продолжить рисование многоугольника';
    var continueLineMsg = 'Нажмите, чтобы продолжить рисование линии';
    var pointerMoveHandler = function (evt) {
        if (evt.dragging) {
            return;
        }
        var helpMsg = 'Нажмите, чтобы начать рисование';
        if (sketch) {
            var geom = sketch.getGeometry();
            if (geom instanceof ol.geom.Polygon) {
                helpMsg = continuePolygonMsg;
            } else if (geom instanceof ol.geom.LineString) {
                helpMsg = continueLineMsg;
            }
        }
        helpTooltipElement.innerHTML = helpMsg;
        helpTooltip.setPosition(evt.coordinate);
        helpTooltipElement.classList.remove('hidden');
    };

    var HEREappId = 'SLdBasp4s1oq2oUbVGxy';
    var HEREappCode = 'D9-h9iVhjgUB_9eUlFETXA';

    var Source_OSM = new ol.source.OSM();


    Source_BingAerialWithLabels = new ol.source.BingMaps({
        key: 'AmYNYRGlIrw_kppWvrIhfzY1v046b4Ft5nopz6Av94XDvTTo8xTkHCEaZ_zMwCOJ',
        imagerySet: 'AerialWithLabels',
    });

    Source_BingRoadStatic = new ol.source.BingMaps({
        key: 'AmYNYRGlIrw_kppWvrIhfzY1v046b4Ft5nopz6Av94XDvTTo8xTkHCEaZ_zMwCOJ',
        imagerySet: 'Road',
    });
    Source_BingRoadDynamic = new ol.source.BingMaps({
        key: 'AmYNYRGlIrw_kppWvrIhfzY1v046b4Ft5nopz6Av94XDvTTo8xTkHCEaZ_zMwCOJ',
        imagerySet: 'RoadOnDemand',
    });

    var urlTpl = 'https://{1-4}.{base}.maps.cit.api.here.com' +
        '/{type}/2.1/maptile/newest/{scheme}/{z}/{x}/{y}/256/png' +
        '?app_id={app_id}&app_code={app_code}';
    function HEREcreateUrl(tpl, HERElayerDesc) {
        return tpl
            .replace('{base}', HERElayerDesc.base)
            .replace('{type}', HERElayerDesc.type)
            .replace('{scheme}', HERElayerDesc.scheme)
            .replace('{app_id}', HERElayerDesc.app_id)
            .replace('{app_code}', HERElayerDesc.app_code);
    };

    var HERElayerDescNormalDay = {
        base: 'base',
        type: 'maptile',
        scheme: 'normal.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERENormalDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescNormalDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });

    var HERElayerDescNormalDayTransit = {
        base: 'base',
        type: 'maptile',
        scheme: 'normal.day.transit',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERENormalDayTransit = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescNormalDayTransit),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });

    var HERElayerDescTerrainDay = {
        base: 'aerial',
        type: 'maptile',
        scheme: 'terrain.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERETerrainDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescTerrainDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });

    var HERElayerDescHybridDay = {
        base: 'aerial',
        type: 'maptile',
        scheme: 'hybrid.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HEREHybridDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescHybridDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' + '<a href="http://developer.here.com">HERE</a>'
    });

    var Source_StamenWatercolor = new ol.source.Stamen({
        layer: 'watercolor'
    });

    var Source_StamenTerrain = new ol.source.Stamen({
        layer: 'terrain'
    });

    var Source_StamenToner = new ol.source.Stamen({
        layer: 'toner'
    });

    var Source_ArcGIS = new ol.source.XYZ({
        attributions: 'Tiles © <a href="https://services.arcgisonline.com/ArcGIS/' +
            'rest/services/World_Topo_Map/MapServer">ArcGIS</a>',
        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/' +
            'World_Topo_Map/MapServer/tile/{z}/{y}/{x}'
    });

    var Source_ThunderforestOpenCycleMap = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestTransport = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/transport/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestLandscape = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/landscape/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestOutdoors = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/outdoors/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestTransportDark = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestSpinalMap = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/spinal-map/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestPioneer = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/pioneer/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestMobileAtlas = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/mobile-atlas/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestNeighbourhood = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/neighbourhood/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Layer_Base = new ol.layer.Tile({
        source: Source_HEREHybridDay
    });
    Layer_Base.set('name', 'Base');
    Layer_Base.setOpacity(0.80);

    var url_pr_pd_avg_m_rcp45_10 = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_pr_pd_avg_m_rcp45_10 = new ol.source.TileWMS({
        url: url_pr_pd_avg_m_rcp45_10,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            "LAYERS": geoserver_workspace_name + ':pr_pd_avg_m_rcp45_10',
            "exceptions": 'application/vnd.ogc.se_inimage',
            tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
        },
        serverType: 'geoserver'
    });
    var Layer_pr_pd_avg_m_rcp45_10 = new ol.layer.Tile({
        source: Source_pr_pd_avg_m_rcp45_10
    });
    Layer_pr_pd_avg_m_rcp45_10.set('name', 'pr_pd_avg_m_rcp45_10');
    Layer_pr_pd_avg_m_rcp45_10.setOpacity(0.80);

    var url_Climate = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_Climate = new ol.source.TileWMS({
        url: url_Climate,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            "LAYERS": geoserver_workspace_name + ':Climate',
            "exceptions": 'application/vnd.ogc.se_inimage',
            tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
        },
        serverType: 'geoserver'
    });
    var Layer_Climate = new ol.layer.Tile({
        source: null
    });
    Layer_Climate.set('name', 'Climate');
    Layer_Climate.setOpacity(0.80);

    //var url_WMA = geoserver_url + 'geonode' + '/wms';
    //var Source_WMA = new ol.source.TileWMS({
    //    url: url_WMA,
    //    params: {
    //        'FORMAT': 'image/png',
    //        'VERSION': '1.1.1',
    //        tiled: true,
    //        "LAYERS": 'geonode:' + $('#gslayer').find(":selected").val(),
    //        "exceptions": 'application/vnd.ogc.se_inimage',
    //        tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
    //    },
    //    serverType: 'geoserver'
    //});
    //var Layer_WMA = new ol.layer.Tile({
    //    source: Source_WMA
    //});
    //Layer_WMA.set('name', 'WMA');
    //Layer_WMA.setOpacity(0.80);

    var url_wmb_polygon = geoserver_url + 'geonode' + '/wms';
    var Source_wmb_polygon = new ol.source.TileWMS({
        url: url_wmb_polygon,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            "LAYERS": 'geonode:wmb_polygon',
            "exceptions": 'application/vnd.ogc.se_inimage',
            tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
        },
        serverType: 'geoserver'
    });
    var Layer_wmb_polygon = new ol.layer.Tile({
        source: Source_wmb_polygon
    });
    Layer_wmb_polygon.set('name', 'wmb_polygon');
    Layer_wmb_polygon.setOpacity(0.80);

    var url_wma_polygon = geoserver_url + 'geonode' + '/wms';
    var Source_wma_polygon = new ol.source.TileWMS({
        url: url_wma_polygon,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            "LAYERS": 'geonode:wma_polygon',
            "exceptions": 'application/vnd.ogc.se_inimage',
            tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
        },
        serverType: 'geoserver'
    });
    var Layer_wma_polygon = new ol.layer.Tile({
        source: Source_wma_polygon
    });
    Layer_wma_polygon.set('name', 'wma_polygon');
    Layer_wma_polygon.setOpacity(0.80);

    var Source_Select = new ol.source.Vector({});
    var Layer_Select = new ol.layer.Vector({
        source: Source_Select,
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: [0, 0, 255, 1]
            }),
            stroke: new ol.style.Stroke({
                color: 'red',
                width: 2
            })
        })
    });
    Layer_Select.set('name', 'wma_polygon');
    Layer_Select.setOpacity(0.80);

    var url_lakes = geoserver_url + 'geonode' + '/wms';
    var Source_lakes = new ol.source.TileWMS({
        url: url_lakes,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            "LAYERS": 'geonode:lakes',
            "exceptions": 'application/vnd.ogc.se_inimage',
            tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
        },
        serverType: 'geoserver'
    });
    var Layer_lakes = new ol.layer.Tile({
        source: Source_lakes
    });
    Layer_lakes.set('name', 'lakes');
    Layer_lakes.setVisible(false);
    Layer_lakes.setOpacity(0.80);

    var url_rivers = geoserver_url + 'geonode' + '/wms';
    var Source_rivers = new ol.source.TileWMS({
        url: url_rivers,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            "LAYERS": 'geonode:rivers',
            "exceptions": 'application/vnd.ogc.se_inimage',
            tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
        },
        serverType: 'geoserver'
    });
    var Layer_rivers = new ol.layer.Tile({
        source: Source_rivers
    });
    Layer_rivers.set('name', 'rivers');
    Layer_rivers.setVisible(false);
    Layer_rivers.setOpacity(0.80);

    // popup
    var container = document.getElementById('popup');
    var content = document.getElementById('popup-content');
    var closer = document.getElementById('popup-closer');
    var overlay = new ol.Overlay({
        element: container,
        autoPan: true,
        autoPanAnimation: {
            duration: 250
        }
    });
    closer.onclick = function () {
        overlay.setPosition(undefined);
        closer.blur();
        return false;
    };

    var map = new ol.Map({
        target: 'map',
        controls: new ol.control.defaults({ attributionOptions: { collapsible: true } }).extend([
            new ol.control.ScaleLine()
        ]),
        layers: [
            Layer_Base,
            Layer_Climate,
            Layer_wmb_polygon,
            Layer_wma_polygon,
            Layer_Select,
            Layer_lakes,
            Layer_rivers,
            Layer_Measure
        ],
        //overlays: [overlay],
        view: new ol.View({
            center: ol.proj.fromLonLat([66.902, 48.714]),
            zoom: 5
        })
    });

    map.on('pointermove', pointerMoveHandler);
    map.getViewport().addEventListener('mouseout', function () {
        helpTooltipElement.classList.add('hidden');
    });
    var typeSelect = document.getElementById('type');
    var draw;
    var formatLength = function (line) {
        var length = ol.sphere.getLength(line);
        var output;
        if (length > 100) {
            output = (Math.round(length / 1000 * 100) / 100) +
                ' ' + 'км';
        } else {
            output = (Math.round(length * 100) / 100) +
                ' ' + 'м';
        }
        return output;
    };
    var formatArea = function (polygon) {
        var area = ol.sphere.getArea(polygon);
        var output;
        if (area > 10000) {
            output = (Math.round(area / 1000000 * 100) / 100) +
                ' ' + 'км<sup>2</sup>';
        } else {
            output = (Math.round(area * 100) / 100) +
                ' ' + 'м<sup>2</sup>';
        }
        return output;
    };
    function addInteraction() {
        var type = (typeSelect.value == 'area' ? 'Polygon' : 'LineString');
        draw = new ol.interaction.Draw({
            source: Source_Measure,
            type: type,
            style: new ol.style.Style({
                fill: new ol.style.Fill({
                    color: 'rgba(255, 255, 255, 0.2)'
                }),
                stroke: new ol.style.Stroke({
                    color: 'rgba(0, 0, 0, 0.5)',
                    lineDash: [10, 10],
                    width: 2
                }),
                image: new ol.style.Circle({
                    radius: 5,
                    stroke: new ol.style.Stroke({
                        color: 'rgba(0, 0, 0, 0.7)'
                    }),
                    fill: new ol.style.Fill({
                        color: 'rgba(255, 255, 255, 0.2)'
                    })
                })
            })
        });
        map.addInteraction(draw);

        createMeasureTooltip();
        createHelpTooltip();

        var listener;
        draw.on('drawstart', function (evt) {
            // set sketch
            sketch = evt.feature;
            var tooltipCoord = evt.coordinate;

            listener = sketch.getGeometry().on('change', function (evt) {
                var geom = evt.target;
                var output;
                if (geom instanceof ol.geom.Polygon) {
                    output = formatArea(geom);
                    tooltipCoord = geom.getInteriorPoint().getCoordinates();
                } else if (geom instanceof ol.geom.LineString) {
                    output = formatLength(geom);
                    tooltipCoord = geom.getLastCoordinate();
                }
                measureTooltipElement.innerHTML = output;
                measureTooltip.setPosition(tooltipCoord);
            });
        });

        draw.on('drawend', function () {
            measureTooltipElement.className = 'ol-tooltip ol-tooltip-static';
            measureTooltip.setOffset([0, -7]);
            // unset sketch
            sketch = null;
            // unset tooltip so that a new one can be created
            measureTooltipElement = null;
            createMeasureTooltip();
            ol.Observable.unByKey(listener);
        });
    }
    function createHelpTooltip() {
        if (helpTooltipElement) {
            helpTooltipElement.parentNode.removeChild(helpTooltipElement);
        }
        helpTooltipElement = document.createElement('div');
        helpTooltipElement.className = 'ol-tooltip hidden';
        helpTooltip = new ol.Overlay({
            element: helpTooltipElement,
            offset: [15, 0],
            positioning: 'center-left'
        });
        map.addOverlay(helpTooltip);
    }
    function createMeasureTooltip() {
        if (measureTooltipElement) {
            measureTooltipElement.parentNode.removeChild(measureTooltipElement);
        }
        measureTooltipElement = document.createElement('div');
        measureTooltipElement.className = 'ol-tooltip ol-tooltip-measure';
        measureTooltip = new ol.Overlay({
            element: measureTooltipElement,
            offset: [0, -15],
            positioning: 'bottom-center'
        });
        map.addOverlay(measureTooltip);
    }
    typeSelect.onchange = function () {
        map.removeInteraction(draw);
        addInteraction();
    };
    addInteraction();
</script>

@* ChangeParameter, ChangeSubParameter, ChangePeriod, ChangeRCP, ChangeDecade *@
<script>
    var Parameter = 'tas',
        SubParameter = 'tasmax_pd_avg',
        Period = 'y',
        RCP = 'rcp45',
        Decade = '10',
        Season = '',
        Month = '';
    //var //firstTemperature = true,
    //    firstPrecipitation = true,
    //    firstEvapotranspiration = true;

    function ChangeParameter() {
        if ($('#Temperature').is(':checked')) {
            $('.Temperature').show();
            $('.Precipitation').hide();
            $('.Evapotranspiration').hide();
            Parameter = 'tas';
            SubParameter = 'tasmax_pd_avg';
            ChangeSubParameter(SubParameter, 'Temperature1');
        }
        else if ($('#Precipitation').is(':checked')) {
            $('.Temperature').hide();
            $('.Precipitation').show();
            $('.Evapotranspiration').hide();
            Parameter = 'pr';
            //if (firstPrecipitation) {
            //    SubParameter = 'avg';
            //    firstPrecipitation = false;
            //}
            SubParameter = 'pr_pd_avg';
            ChangeSubParameter(SubParameter, 'Precipitation1');
        }
        else if ($('#Evapotranspiration').is(':checked')) {
            $('.Temperature').hide();
            $('.Precipitation').hide();
            $('.Evapotranspiration').show();
            Parameter = 'et';
            //if (firstEvapotranspiration) {
            //    SubParameter = '?';
            //    firstEvapotranspiration = false;
            //}
            SubParameter = 'et_pd_avg';
            ChangeSubParameter(SubParameter, 'Evapotranspiration1');
        }
        //ChangeLayerClimate();
        //ChangePeriod();
    }

    function ChangeSubParameter(Sub_parameter, element) {
        SubParameter = Sub_parameter;
        $('#Temperature1').removeClass('active');
        $('#Temperature2').removeClass('active');
        $('#Temperature3').removeClass('active');
        $('#Temperature4').removeClass('active');
        $('#Temperature5').removeClass('active');
        $('#Temperature6').removeClass('active');
        $('#Precipitation1').removeClass('active');
        $('#Precipitation2').removeClass('active');
        $('#Precipitation3').removeClass('active');
        $('#Evapotranspiration1').removeClass('active');
        $('#Evapotranspiration2').removeClass('active');
        $('#' + element).addClass('active');
        //ChangeLayerClimate();
        //ChangePeriod();
        ChangeDecade();
    }

    function ChangeDecade() {
        if ($('#decade10').is(':checked')) {
            Decade = '10';
        }
        if ($('#decade20').is(':checked')) {
            Decade = '20';
        }
        if ($('#decade30').is(':checked')) {
            Decade = '30';
        }
        //ChangeLayerClimate();
        ChangeRCP();
    }

    function ChangeRCP() {
        if ($('#RCP45').is(':checked')) {
            RCP = 'rcp45';
        }
        if ($('#RCP85').is(':checked')) {
            RCP = 'rcp85';
        }
        //ChangeLayerClimate();
        ChangePeriod();
    }

    function ChangePeriod() {
        $('.Seasons').hide();
        $('.Months').hide();
        if ($('#Year').is(':checked')) {
            Period = 'y';
        }
        if ($('#Season').is(':checked')) {
            Period = 's';
            $('.Seasons').show();
        }
        if ($('#Month').is(':checked')) {
            Period = 'm';
            $('.Months').show();
        }
        ChangeSeason();
    }

    function ChangeSeason() {
        if ($('#Season1').is(':checked')) {
            Season = '1';
        }
        if ($('#Season2').is(':checked')) {
            Season = '2';
        }
        if ($('#Season3').is(':checked')) {
            Season = '3';
        }
        if ($('#Season4').is(':checked')) {
            Season = '4';
        }
        ChangeMonth();
    }

    function ChangeMonth() {
        if ($('#Month01').is(':checked')) {
            Month = '01';
        }
        if ($('#Month02').is(':checked')) {
            Month = '02';
        }
        if ($('#Month03').is(':checked')) {
            Month = '03';
        }
        if ($('#Month04').is(':checked')) {
            Month = '04';
        }
        if ($('#Month05').is(':checked')) {
            Month = '05';
        }
        if ($('#Month06').is(':checked')) {
            Month = '06';
        }
        if ($('#Month07').is(':checked')) {
            Month = '07';
        }
        if ($('#Month08').is(':checked')) {
            Month = '08';
        }
        if ($('#Month09').is(':checked')) {
            Month = '09';
        }
        if ($('#Month10').is(':checked')) {
            Month = '10';
        }
        if ($('#Month11').is(':checked')) {
            Month = '11';
        }
        if ($('#Month12').is(':checked')) {
            Month = '12';
        }

        ChangeLayerClimate();
    }
</script>

@* ChangeLayerClimate, ChangeDate *@
<script>
    var dates = null;
    var yearsvalues = []; //[1901, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100];
    var min = 1900,
        max = 2100,
        from = 2001,
        step = 10,
        to = from + step;
    var slider_first = true;
    var range_instance = null;
    var $ClimateTimeline = $(".js-range-slider"),
        $btn_minus = $(".MinusBtn"),
        $btn_plus = $(".PlusBtn");
    var InfoTitle = '',
        InfoTitletitle = '';

    function ChangeLayerClimate() {
        var layerClimate = '';

        // Отклонения осадков в мм
        if (SubParameter == 'pr_dlt_avg_mm') {
            var SubParameter_ = SubParameter.substr(0, SubParameter.length - 3);
            layerClimate = SubParameter_ + '_' + Period + '_' + RCP + '_' + Decade + '_' + 'mm';
        }
        else {
            layerClimate = SubParameter + '_' + Period + '_' + RCP + '_' + Decade;
        }

        $('#InfoTitle').text('');
        $('#InfoTitle').prop('title', '');
        var InfoInfo = '';
        if ($('#RCP45').is(':checked')) {
            InfoInfo = 'RCP 45';
        }
        if ($('#RCP85').is(':checked')) {
            InfoInfo = 'RCP 85';
        }
        $('#InfoInfo').text(InfoInfo);
        $('#InfoYears').text('');

        $.ajax({
            url: '@Url.Action("GetLayerInfo")',
            data: {
                workspace: geoserver_workspace_name,
                layer: layerClimate
            },
            type: 'POST',
            success: function (data) {
                $('#InfoTitle').text(data.title);
                //$('#InfoInfo').text(data.abstr);
                $('#InfoTitle').prop('title', data.abstr);
                InfoTitle = data.title;
                InfoTitletitle = data.abstr;
            },
            error: function () {
            }
        })

        // Get mosaic layer dates (times)
        $.ajax({
            url: '@Url.Action("GetLayerDates")',
            data: {
                workspace: geoserver_workspace_name,
                layer: layerClimate
            },
            type: 'POST',
            success: function (data) {
                var years_all = data.dates;
                for (i = 0; i < years_all.length; i++) {
                    years_all[i] = years_all[i].substr(0, 4);
                }
                var years = [];
                $.each(years_all, function (i, el) {
                    if ($.inArray(el, years) === -1) years.push(el);
                });
                dates = years;
                $('#date').attr('max', dates.length - 1);
                $('#date').val(0);

                yearsvalues = [];
                $.each(dates, function (i, el) {
                    yearsvalues.push(parseInt(el));
                });
                min = Math.min(...yearsvalues);
                max = Math.max(...yearsvalues) + parseInt(Decade);
                from = min;
                to = from + parseInt(Decade);
                CreateDateSlider();
                
                $('#InfoYears').text(min + ' - ' + max);

                ChangeDate();
            },
            error: function () {
            }
        })
    };

    function CreateDateSlider() {
        if (slider_first) {
            $("#ClimateTimeline").ionRangeSlider({
                skin: "modern",
                grid: true,
                grid_num: 15,
                type: "double",
                min: min,
                max: max,
                step: step,
                from: from,
                to: to,
                drag_interval: true,
                min_interval: 10,
                max_interval: 10,
                prettify_enabled: false,
                onFinish: function (data) {
                    from = data.from,
                        to = data.to;
                },
                onChange: function (data) {
                    // Called every time handle position is changed
                    ChangeDate();
                },
                onStart: function (data) {
                    addSpecialAreas(data.slider);
                },
                onUpdate: function (data) {
                    addSpecialAreas(data.slider);
                }
            });

            //let my_range = $(".js-range-slider").data("ionRangeSlider");

            slider_first = false;

            $btn_minus.on("click", function () {
                updateRange(-1);
                ChangeDate();
            });

            $btn_plus.on("click", function () {
                updateRange(1);
                ChangeDate();
            });
        }

        range_instance = $ClimateTimeline.data("ionRangeSlider");

        range_instance.update({
            min: min,
            max: max,
            step: step,
            from: from,
            to: to
        });

        var updateRange = function (direction) {
            //from += step * direction;
            //if (from < min) {
            //    from = min;
            //} else if (from > max) {
            //    from = max;
            //}

            //range_instance.update({
            //    from: from
            //});
            //to += step * direction;
            //if (to < min) {
            //    to = min;
            //} else if (to > max) {
            //    to = max;
            //}

            //range_instance.update({
            //    to: to
            //});
            if (direction == 1) {
                if (to + step * direction <= max) {
                    from += step * direction;
                    to += step * direction;
                }
            }

            if (direction == -1) {
                if (from + step * direction >= min) {
                    from += step * direction;
                    to += step * direction;
                }
            }

            range_instance.update({
                min: min,
                max: max,
                step: step,
                from: from,
                to: to
            });
        };
    }

    function ChangeDate() {
        // popup
        overlay.setPosition(undefined);
        closer.blur();

        var layerClimate = SubParameter + '_' + Period + '_' + RCP + '_' + Decade;
        // Отклонения осадков в мм
        if (SubParameter == 'pr_dlt_avg_mm') {
            var SubParameter_ = SubParameter.substr(0, SubParameter.length - 3),
                SubParameter_;
            layerClimate = SubParameter_ + '_' + Period + '_' + RCP + '_' + Decade + '_' + 'mm';
        }
        else {
            layerClimate = SubParameter + '_' + Period + '_' + RCP + '_' + Decade;
        }

        //var date = dates[$('#date').val()];
        //date = date.substr(0, 4) + '-' + date.substr(4, 2) + '-' + date.substr(6, 2);
        date = range_instance.result.from;

        var date_str = date,
            date_label = date;
        if (Period == 'y') {
            date_str += '-01-01';
        }
        if (Period == 's') {
            date_str += '-0' + Season + '-01';
        }
        if (Period == 'm') {
            date_str += '-' + Month + '-01';
        }
        date_label += ' - ' + (parseInt(date_label) + parseInt(Decade)).toString();
        //$('#DateLabel').text(date_label);
        var Source_Climate_New = new ol.source.TileWMS({
            url: geoserver_url + geoserver_workspace_name + '/wms?' + 'time=' + date_str + '&',
            params: {
                'FORMAT': 'image/png',
                'VERSION': '1.1.1',
                tiled: true,
                "LAYERS": geoserver_workspace_name + ':' + layerClimate,
                "exceptions": 'application/vnd.ogc.se_inimage',
                tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
            },
            serverType: 'geoserver'
        });
        Layer_Climate.setSource(Source_Climate_New);

        if ((Decade == '10' && range_instance.result.from == 2001)
            || (Decade == '20' && (range_instance.result.from == 1991 || range_instance.result.from == 2001))
            || (Decade == '30' && (range_instance.result.from == 1981 || range_instance.result.from == 1991 || range_instance.result.from == 2001))) {
            $('#InfoTitle').text('При построении карт используются архивные данные состоящие из ретроспективных проекций за период с 1950 г. по 2005 г. и проекций на будущее, которые представлены за период 2006-2100 гг. для двух сценариев репрезентативных траекторий концентрации парниковых газов: RCP4.5 и RCP8.5. В связи с перекрытием ретроспективных данных и проекций на будущее в период с 2001-2010 гг. ограничивают возможность проведения корректных расчетов и построения карт за определенные периоды: 10 лет – 2001-2010 гг., за 20 лет – 1991-2010, 2001-2020 гг., за 30 лет – 1981-2010, 1991-2020, 2001-2030 гг.');
            $('#InfoTitle').prop('title', '');
        }
        else {
            $('#InfoTitle').text(InfoTitle);
            //$('#InfoInfo').text(data.abstr);
            $('#InfoTitle').prop('title', InfoTitletitle);
        }
    }
    function addSpecialAreas($slider) {
        var area = [45, 55];
        var $line = $slider.find(".irs-line");
        var left_percent = area[0];
        var right_percent = area[1];
        var width_percent = right_percent - left_percent;
        $line.append("<div class='range_area' style='left: " + left_percent + "%; width: " + width_percent + "%;'></div>")
    }
</script>

@* map.on('singleclick') *@
<script>
    map.on('singleclick', function (evt) {
        if (tool != 'select') {
            return;
        }
        Source_Select.clear();
        $('#featureId').val(null);
        var viewResolution = (map.getView().getResolution());
        var url_Climate = Layer_Climate.getSource().getGetFeatureInfoUrl(
            evt.coordinate, viewResolution, 'EPSG:3857',
            {
                'INFO_FORMAT': 'text/javascript'
            });
        if (url_Climate) {
            var parser = new ol.format.GeoJSON();
            $.ajax({
                url: url_Climate,
                dataType: 'jsonp',
                jsonpCallback: 'parseResponse',
                error: function (xhr, status, error) {
                }
            }).then(function (response) {
                var result = parser.readFeatures(response);
                if (result.length) {
                    var hdms = ol.coordinate.toStringHDMS(ol.proj.toLonLat(evt.coordinate));
                    content.innerHTML = '<p>' + hdms + '</p><code>' + result[0].get('GRAY_INDEX').toFixed(2) + '</code>';
                    overlay.setPosition(evt.coordinate);
                }
            })
        }
        var url_wma_polygon = Layer_wma_polygon.getSource().getGetFeatureInfoUrl(
            evt.coordinate, viewResolution, 'EPSG:3857',
            {
                'INFO_FORMAT': 'text/javascript'
            });
        if (url_wma_polygon) {
            var parser = new ol.format.GeoJSON();
            $.ajax({
                jsonp: false,
                jsonpCallback: 'getJson',
                type: 'GET',
                url: url_wma_polygon + "&format_options=callback:getJson",
                async: false,
                dataType: 'jsonp',
                error: function (xhr, status, error) {
                    console.log('error');
                },
            }).then(function (response) {
                featureId = -1;
                var result = parser.readFeatures(response);
                if (result.length > 0) {
                    var polyFeature = new ol.Feature({
                        geometry: new ol.geom.MultiPolygon(response.features[0].geometry.coordinates)
                    });
                    Source_Select.addFeature(polyFeature);
                    $('#featureId').val(result[0].get('OBJECTID'));
                }
            });
        }
    });
</script>

@* SelectTool, MeasureTool *@
<script>
    var tool = '';
    function SelectTool() {
        if (tool == 'select') {
            return;
        }
        tool = 'select';
        map.removeInteraction(draw);
        Source_Measure.clear();
        //$(".ol-overlay-container").remove();
        if (helpTooltip != null) {
            map.removeOverlay(helpTooltip);
        }
        if (measureTooltip != null) {
            map.removeOverlay(measureTooltip);
        }
        map.addOverlay(overlay);
        //$(".ol-tooltip-static").remove();
        $(".ol-tooltip").remove();
        $('.measure').hide();
        $('.select').show();
        $('#SelectButton').addClass('btn-dark');
        $('#MeasureButton').removeClass('btn-dark');
    }
    function MeasureTool() {
        if (tool == 'measure') {
            return;
        }
        tool = 'measure';
        map.removeOverlay(overlay);
        overlay.setPosition(undefined);
        closer.blur();
        addInteraction();
        $('.measure').show();
        $('.select').hide();
        $('#MeasureButton').addClass('btn-dark');
        $('#SelectButton').removeClass('btn-dark');
        Source_Select.clear();
        $('#featureId').val(null);
    }
</script>

@* ChangeLayerXXX, ChangeLayers, ChangeWMALayer, Charts *@
<script>
    var datespr_pd_avg_m_rcp45_10 = new Array();
    $('#datespr_pd_avg_m_rcp45_10 option').each(function () {
        datespr_pd_avg_m_rcp45_10.push($(this).val());
    });
    //var inputpr_pd_avg_m_rcp45_10 = document.getElementById('datepr_pd_avg_m_rcp45_10'),
    //    outputpr_pd_avg_m_rcp45_10 = document.getElementById('DateLabelpr_pd_avg_m_rcp45_10');
    //inputpr_pd_avg_m_rcp45_10.oninput = function () {
    //    outputpr_pd_avg_m_rcp45_10.innerHTML = datespr_pd_avg_m_rcp45_10[this.value];
    //    ChangeLayerpr_pd_avg_m_rcp45_10();
    //};
    //inputpr_pd_avg_m_rcp45_10.oninput();
    function ChangeLayerpr_pd_avg_m_rcp45_10() {
        var Source_pr_pd_avg_m_rcp45_10_New = new ol.source.TileWMS({
            url: geoserver_url + geoserver_workspace_name + '/wms?' + 'time=' + $('#DateLabelpr_pd_avg_m_rcp45_10').html() + '&',
            params: {
                'FORMAT': 'image/png',
                'VERSION': '1.1.1',
                tiled: true,
                "LAYERS": geoserver_workspace_name + ':pr_pd_avg_m_rcp45_10',
                "exceptions": 'application/vnd.ogc.se_inimage',
                tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
            },
            serverType: 'geoserver'
        });
        Layer_pr_pd_avg_m_rcp45_10.setSource(Source_pr_pd_avg_m_rcp45_10_New);
    }

    function ChangeLayers() {
        map.getLayers().forEach(function (layer) {
            if (layer.get('name') == 'Base') {
                layer.setVisible(document.getElementById("layerBaseShow").checked);
                layer.setOpacity($('#layerBaseOpacity').val() / 100)
                if ($('#layerBaseType').val() == 'OSM') {
                    layer.setSource(Source_OSM);
                }
                else if ($('#layerBaseType').val() == 'BingAerialWithLabels') {
                    layer.setSource(Source_BingAerialWithLabels);
                }
                else if ($('#layerBaseType').val() == 'BingRoadStatic') {
                    layer.setSource(Source_BingRoadStatic);
                }
                else if ($('#layerBaseType').val() == 'BingRoadDynamic') {
                    layer.setSource(Source_BingRoadDynamic);
                }
                else if ($('#layerBaseType').val() == 'HERENormalDay') {
                    layer.setSource(Source_HERENormalDay);
                }
                else if ($('#layerBaseType').val() == 'HERENormalDayTransit') {
                    layer.setSource(Source_HERENormalDayTransit);
                }
                else if ($('#layerBaseType').val() == 'HERETerrainDay') {
                    layer.setSource(Source_HERETerrainDay);
                }
                else if ($('#layerBaseType').val() == 'HEREHybridDay') {
                    layer.setSource(Source_HEREHybridDay);
                }
                else if ($('#layerBaseType').val() == 'StamenWatercolor') {
                    layer.setSource(Source_StamenWatercolor);
                }
                else if ($('#layerBaseType').val() == 'StamenTerrain') {
                    layer.setSource(Source_StamenTerrain);
                }
                else if ($('#layerBaseType').val() == 'StamenToner') {
                    layer.setSource(Source_StamenToner);
                }
                else if ($('#layerBaseType').val() == 'ArcGIS') {
                    layer.setSource(Source_ArcGIS);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestOpenCycleMap') {
                    layer.setSource(Source_ThunderforestOpenCycleMap);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestTransport') {
                    layer.setSource(Source_ThunderforestTransport);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestLandscape') {
                    layer.setSource(Source_ThunderforestLandscape);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestOutdoors') {
                    layer.setSource(Source_ThunderforestOutdoors);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestTransportDark') {
                    layer.setSource(Source_ThunderforestTransportDark);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestSpinalMap') {
                    layer.setSource(Source_ThunderforestSpinalMap);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestPioneer') {
                    layer.setSource(Source_ThunderforestPioneer);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestMobileAtlas') {
                    layer.setSource(Source_ThunderforestMobileAtlas);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestNeighbourhood') {
                    layer.setSource(Source_ThunderforestNeighbourhood);
                }
            }
            if (layer.get('name') == 'Climate') {
                layer.setVisible(document.getElementById("layerClimateShow").checked);
                layer.setOpacity($('#layerClimateOpacity').val() / 100)
            }
            if (layer.get('name') == 'wmb_polygon') {
                layer.setVisible(document.getElementById("layerwmb_polygonShow").checked);
                layer.setOpacity($('#layerwmb_polygonOpacity').val() / 100);
            }
            if (layer.get('name') == 'wma_polygon') {
                layer.setVisible(document.getElementById("layerwma_polygonShow").checked);
                layer.setOpacity($('#layerwma_polygonOpacity').val() / 100);
            }
            if (layer.get('name') == 'lakes') {
                layer.setVisible(document.getElementById("layerlakesShow").checked);
                layer.setOpacity($('#layerlakesOpacity').val() / 100)
            }
            if (layer.get('name') == 'rivers') {
                layer.setVisible(document.getElementById("layerriversShow").checked);
                layer.setOpacity($('#layerriversOpacity').val() / 100)
            }
            if (layer.get('name') == 'WMA') {
                var Source_WMA_New = new ol.source.TileWMS({
                    url: geoserver_url + 'geonode' + '/wms',
                    params: {
                        'FORMAT': 'image/png',
                        'VERSION': '1.1.1',
                        tiled: true,
                        "LAYERS": 'geonode:' + $('#gslayer').find(":selected").val(),
                        "exceptions": 'application/vnd.ogc.se_inimage',
                        tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
                    },
                    serverType: 'geoserver'
                });
                Layer_WMA.setSource(Source_WMA_New);

                layer.setVisible(document.getElementById("layerWMAShow").checked);
                layer.setOpacity($('#layerWMAOpacity').val() / 100);
            }

        })
    }

    function Charts() {
        if ($('#featureId').val() != '' && $('#featureId').val() != null && $('#featureId').val() != undefined && $('#featureId').val() > -1) {
            var urlC = '@Url.Action("Charts", "climate")';
            var urlC = '/climate/Charts?Id=' + $('#featureId').val();
            var win = window.open(urlC, '_blank');
            win.focus();
        }
    };
</script>

@* ChangeLayersClimate *@
<script>
    function ChangeLayersClimate() {
        $('.Climate').hide();
        $('.' + $('#layerClimate').val()).show();
        $('#layerpr_pd_avg_m_rcp45_10Show').prop("checked", false);
        $('#layer' + $('#layerClimate').val() + 'Show').prop("checked", true);
        ChangeLayers();
    }
</script>

@* $(document).ready *@
<script>
    $(document).ready(function () {
        SelectTool();
        ChangeParameter();
    });
</script>

@*Tooltips*@
<script>
    $(function () {
        if (typeof document.body.attachShadow === 'function') {
            var shadowRoot = $('#shadow')[0].attachShadow({ mode: 'open' })
            shadowRoot.innerHTML =
                '<button type="button" class="btn btn-secondary" data-toggle="tooltip" data-placement="top" title="Tooltip on top in a shadow dom">' +
                '  Tooltip on top in a shadow dom' +
                '</button>' +
                '<button id="secondTooltip" type="button" class="btn btn-secondary" data-toggle="tooltip" data-placement="top" title="Tooltip on top in a shadow dom with container option">' +
                '  Tooltip on top in a shadow dom' +
                '</button>'

            $(shadowRoot.firstChild).tooltip()
            $(shadowRoot.getElementById('secondTooltip')).tooltip({
                container: shadowRoot
            })
        }
        $('[data-toggle="tooltip"]').tooltip()
        $('#tooltipElement').tooltip({
            container: $('#customContainer')[0]
        })
        $('#target').tooltip({
            placement: 'top',
            trigger: 'manual'
        }).tooltip('show')
    })
</script>
@*Close button to card*@
<script>
    $(function () {
        // run the currently selected effect
        function runEffect() {
            // Run the effect
            $("#MapTitle").toggle("clip");
        };

        $("#TitleHide").on("click", function () {
            runEffect();
        });
    });
</script>
@*Close button to legend*@


<script type="text/javascript">
    $(function () {
        $("#Legend-2").dialog({
            autoOpen: false,
            hide: "clip",
            show: "clip",
            height: 90,
            minWidth: 400,
            position: {
                my: "bottom bottom-50px",
                at: "right bottom",
                of: window
            }
        });
        $("#LegendHide").click(function () {
            ($("#Legend-2").dialog("isOpen") == false) ? $(
                "#Legend-2").dialog("open") : $("#Legend-2").dialog("close");
        });
        $("#Legend-2").dialog({ autoOpen: false });
        $("#Legend-2").parent().children().children('.ui-dialog-titlebar-close').hide();
    });
</script>