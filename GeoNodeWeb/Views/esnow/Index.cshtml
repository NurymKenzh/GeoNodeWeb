@using GeoNodeWeb.Controllers
@{
    ViewData["Title"] = "Карта";
    Layout = "~/Views/Shared/_LayoutEsnow.cshtml";
}

<link href="~/esnow/lib/jquery-ui/jquery-ui.css" rel="stylesheet" />
<script src="~/esnow/lib/jquery-ui/jquery-ui.js"></script>
<link href="~/esnow/lib/ol/ol.css" rel="stylesheet" />
<script src="~/esnow/lib/ol/ol.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css" />
@*jBox*@
<link href="~/esnow/lib/vendor/jBox/dist/jBox.all.css" rel="stylesheet" />
<script src="~/esnow/lib/vendor/jBox/dist/jBox.all.js"></script>

<div class="container-fluid p-0">
    <!-- Wrapper -->
    <div class="wrapper">
        <!-- Sidebar -->
        <nav class="sidebar">
            <!-- close sidebar menu -->
            <div class="dismiss">
                <i class="fas fa-arrow-left"></i>
            </div>

            <div class="logo">
                <h3><a href="#">ESnow Menu</a></h3>
            </div>
            <div class="card-body p-2">
                <form>
                    <label class="m-0" for="SourceProduct">Satellite</label>                    
                    <div class="input-group input-group-sm">
                        <select class="form-control" id="SourceProduct">
                            <option value="0">Terra MOD10A1</option>
                            <option value="1">Aqua MYD10A1</option>
                        </select>
                        <div class="input-group-append">
                            <span class="input-group-text">
                                <a href="#" target="_blank">
                                    <i class="SomeInfo fa fa-info-circle" InfoTitle="Some Information"></i>
                                </a>
                            </span>
                        </div>
                    </div><!-- for Dataset -->
                    <label class="m-0" for="DataSet">Dataset</label>
                    <div class="input-group input-group-sm">
                        <select class="form-control" id="DataSet">
                            <option value="NDSI">NDSI_Snow_Cover</option>
                            <option value="Anomaly">NDSI_Snow_Anomaly</option>
                        </select>
                        <div class="input-group-append">
                            <span class="input-group-text">
                                <a href="#" target="_blank">
                                    <i class="SomeInfo fa fa-info-circle" InfoTitle="Some Information"></i>
                                </a>
                            </span>
                        </div>
                    </div>
                    <input id="layerMODISOpacity" type="range" class="form-control-range" min="0" max="100" value="80" oninput="ChangeLayers()" />
                    <!-- Year -->
                    <label class="m-0" for="Year_MOLT_MOD10">Year</label>
                    <div class="input-group input-group-sm">
                        <select class="form-control" id="Year_MOLT_MOD10">
                            <option value="2019">2019</option>
                            <option value="2020">2020</option>
                        </select>
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <input type="checkbox" id="layerMODISShow" checked="checked">
                            </div>
                        </div>
                    </div>
                    <label class="m-0" for="DayOfYear_MOLT">Date</label>
                    <!-- Day -->
                    <div class="input-group input-group-sm">
                        <div class="input-group-prepend">
                            <span class="input-group-text">
                                <a href="#" target="_blank">
                                    <i class="fa fa-chevron-left"></i>
                                </a>
                            </span>
                        </div>
                        <select class="custom-select" id="DayOfYear_MOLT" aria-describedby="DayHelpBlock">
                            <option value="1">001:02/01 - 08/01</option>
                            <option value="2">002:08/01 - 08/16</option>
                        </select>
                        <div class="input-group-append">
                            <span class="input-group-text">
                                <a href="#" target="_blank">
                                    <i class="fa fa-chevron-right"></i>
                                </a>
                            </span>
                        </div>
                    </div>
                </form>
            </div>

            <ul class="list-unstyled menu-elements">
                <li class="">
                    <a class="scroll-link" href="#"><i class="fas fa-home"></i> Home</a>
                </li>
                <li>
                    <a class="scroll-link" href="#"><i class="fas fa-cog"></i> Chart page</a>
                </li>
                <li>
                    <a href="#LayerSections" data-toggle="collapse" aria-expanded="false" class="dropdown-toggle" role="button" aria-controls="LayerSections">
                        <i class="fas fa-sync"></i>Layer sections
                    </a>
                    <ul class="collapse list-unstyled" id="LayerSections">
                        <li>
                            <a class="scroll-link" href="#Layer1">Layer 1</a>
                        </li>
                        <li>
                            <a class="scroll-link" href="#Layer2">Layer 2</a>
                        </li>
                    </ul>
                </li>
            </ul>

            <div class="to-top">
                <a class="btn btn-primary btn-customized-3" href="#" role="button">
                    <i class="fas fa-bar-chart"></i> Chart
                </a>
            </div>

            <div class="dark-light-buttons">
                <a class="btn btn-primary btn-customized-4 btn-customized-dark" href="#" role="button">Dark</a>
                <a class="btn btn-primary btn-customized-4 btn-customized-light" href="#" role="button">Light</a>
            </div>

        </nav>
        <!-- End sidebar -->
        <!-- Dark overlay -->
        <div class="overlay"></div>
        <!-- Content -->
        <div class="content">
            <!-- open sidebar menu -->
            <a class="btn btn-primary btn-customized open-menu" href="#" role="button">
                <i class="fas fa-snowflake-o"></i> <span>Menu</span>
            </a>
            <!-- Map content -->
            <!-- Footer -->
        </div>

        <!-- End content -->
    </div>
    <!-- End wrapper -->
    <div id="map" class="position-fixed col-md-12 col-lg-12 m-0 p-0 bg-light"></div>
</div>
<div id="ndsilegenddialog" title="Легенда" hidden="hidden" style="width: 200px;">
    <img src="~/lib/images/Logo Water G.jpg" style="width: 220px;" />
</div>



@* Layers, Measure, map *@
<script type="text/javascript">
    var geoserver_url = "@ViewBag.GeoServerUrl",
        geoserver_workspace_name = "esnow";

    // Measure
    var Source_Measure = new ol.source.Vector();
    var Layer_Measure = new ol.layer.Vector({
        source: Source_Measure,
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: 'rgba(255, 255, 255, 0.2)'
            }),
            stroke: new ol.style.Stroke({
                color: '#ffcc33',
                width: 2
            }),
            image: new ol.style.Circle({
                radius: 7,
                fill: new ol.style.Fill({
                    color: '#ffcc33'
                })
            })
        })
    });
    var sketch;
    var helpTooltipElement;
    var helpTooltip;
    var measureTooltipElement;
    var measureTooltip;
    var continuePolygonMsg = 'Нажмите, чтобы продолжить рисование многоугольника';
    var continueLineMsg = 'Нажмите, чтобы продолжить рисование линии';
    var pointerMoveHandler = function (evt) {
        if (evt.dragging) {
            return;
        }
        var helpMsg = 'Нажмите, чтобы начать рисование';
        if (sketch) {
            var geom = sketch.getGeometry();
            if (geom instanceof ol.geom.Polygon) {
                helpMsg = continuePolygonMsg;
            } else if (geom instanceof ol.geom.LineString) {
                helpMsg = continueLineMsg;
            }
        }
        helpTooltipElement.innerHTML = helpMsg;
        helpTooltip.setPosition(evt.coordinate);
        helpTooltipElement.classList.remove('hidden');
    };

    var Source_Select = new ol.source.Vector({});
    var Layer_Select = new ol.layer.Vector({
        source: Source_Select,
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: [0, 0, 255, 1]
            }),
            stroke: new ol.style.Stroke({
                color: 'red',
                width: 2
            })
        })
    });

    Layer_Select.set('name', 'WMA');

    var HEREappId = 'SLdBasp4s1oq2oUbVGxy';
    var HEREappCode = 'D9-h9iVhjgUB_9eUlFETXA';

    var Source_OSM = new ol.source.OSM();
    var Layer_Base = new ol.layer.Tile({
        source: Source_OSM
    });
    Layer_Base.set('name', 'Base');
    Layer_Base.setOpacity(0.80);

    Source_BingAerialWithLabels = new ol.source.BingMaps({
        key: 'AmYNYRGlIrw_kppWvrIhfzY1v046b4Ft5nopz6Av94XDvTTo8xTkHCEaZ_zMwCOJ',
        imagerySet: 'AerialWithLabels',
    });
    Source_BingRoadStatic = new ol.source.BingMaps({
        key: 'AmYNYRGlIrw_kppWvrIhfzY1v046b4Ft5nopz6Av94XDvTTo8xTkHCEaZ_zMwCOJ',
        imagerySet: 'Road',
    });
    Source_BingRoadDynamic = new ol.source.BingMaps({
        key: 'AmYNYRGlIrw_kppWvrIhfzY1v046b4Ft5nopz6Av94XDvTTo8xTkHCEaZ_zMwCOJ',
        imagerySet: 'RoadOnDemand',
    });

    var urlTpl = 'https://{1-4}.{base}.maps.cit.api.here.com' +
        '/{type}/2.1/maptile/newest/{scheme}/{z}/{x}/{y}/256/png' +
        '?app_id={app_id}&app_code={app_code}';
    function HEREcreateUrl(tpl, HERElayerDesc) {
        return tpl
            .replace('{base}', HERElayerDesc.base)
            .replace('{type}', HERElayerDesc.type)
            .replace('{scheme}', HERElayerDesc.scheme)
            .replace('{app_id}', HERElayerDesc.app_id)
            .replace('{app_code}', HERElayerDesc.app_code);
    };

    var HERElayerDescNormalDay = {
        base: 'base',
        type: 'maptile',
        scheme: 'normal.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERENormalDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescNormalDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });

    var HERElayerDescNormalDayTransit = {
        base: 'base',
        type: 'maptile',
        scheme: 'normal.day.transit',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERENormalDayTransit = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescNormalDayTransit),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });

    var HERElayerDescTerrainDay = {
        base: 'aerial',
        type: 'maptile',
        scheme: 'terrain.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERETerrainDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescTerrainDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });

    var HERElayerDescHybridDay = {
        base: 'aerial',
        type: 'maptile',
        scheme: 'hybrid.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HEREHybridDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescHybridDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' + '<a href="http://developer.here.com">HERE</a>'
    });

    var Source_StamenWatercolor = new ol.source.Stamen({
        layer: 'watercolor'
    });

    var Source_StamenTerrain = new ol.source.Stamen({
        layer: 'terrain'
    });

    var Source_StamenToner = new ol.source.Stamen({
        layer: 'toner'
    });

    var Source_ArcGIS = new ol.source.XYZ({
        attributions: 'Tiles © <a href="https://services.arcgisonline.com/ArcGIS/' +
            'rest/services/World_Topo_Map/MapServer">ArcGIS</a>',
        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/' +
            'World_Topo_Map/MapServer/tile/{z}/{y}/{x}'
    });

    var Source_ThunderforestOpenCycleMap = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestTransport = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/transport/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestLandscape = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/landscape/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestOutdoors = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/outdoors/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestTransportDark = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestSpinalMap = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/spinal-map/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestPioneer = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/pioneer/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestMobileAtlas = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/mobile-atlas/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var Source_ThunderforestNeighbourhood = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/neighbourhood/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });

    var url_MODIS = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_MODIS = new ol.source.TileWMS({
        url: url_MODIS,
        //params: {
        //    'FORMAT': 'image/png',
        //    'VERSION': '1.1.1',
        //    //tiled: true,
        //    "LAYERS": geoserver_workspace_name + ':SANMOST_MOD10A2006_MAXIMUM_SNOW_EXTENT_3857',
        //    "exceptions": 'application/vnd.ogc.se_inimage',
        //    //tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
        //    tilesOrigin: 4359518.24116768 + "," + 4865990.74586705
        //},
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            "TIME": '2000-02-26',
            "STYLES": geoserver_workspace_name + ':SANMOST_MOD10A2006_MAXIMUM_SNOW_EXTENT',
            "LAYERS": geoserver_workspace_name + ':SANMOST_MOD10A2006_MAXIMUM_SNOW_EXTENT',
            "exceptions": 'application/vnd.ogc.se_inimage',
            tilesOrigin: 4359518.24116768 + "," + 4865990.74586705
        },
        serverType: 'geoserver'
    });
    var Layer_MODIS = new ol.layer.Tile({
        source: Source_MODIS
    });
    Layer_MODIS.set('name', 'MODIS');
    Layer_MODIS.setOpacity(0.80);

    var url_WMA = geoserver_url + 'geonode' + '/wms';
    var Source_WMA = new ol.source.TileWMS({
        url: url_WMA,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            "LAYERS": 'geonode:' + $('#gslayer').find(":selected").val(),
            "exceptions": 'application/vnd.ogc.se_inimage',
            tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
        },
        serverType: 'geoserver'
    });
    var Layer_WMA = new ol.layer.Tile({
        source: Source_WMA
    });
    Layer_WMA.set('name', 'WMA');
    Layer_WMA.setOpacity(0.80);

    //console.log(atimes);

    //var url_Animator = geoserver_url + geoserver_workspace_name + '/wms/animate'; //?' + 'aparam=time&avalues=2000-02-26,2000-03-05,2000-03-13,2000-03-21,2000-03-29' + '&'
    //var Source_Animator = new ol.source.ImageWMS({
    //    url: url_Animator,
    //    params: {
    //        'FORMAT': 'image/gif;subtype=animated',
    //        //FORMAT_OPTIONS: 'antialias:none;gif_loop_continuosly:true;gif_frames_delay:100',
    //        'VERSION': '1.1.1',
    //        //tiled: false,
    //        "LAYERS": geoserver_workspace_name + ':SANMOST_MOD10A2006_MAXIMUM_SNOW_EXTENT',
    //        //"exceptions": 'application/vnd.ogc.se_inimage',
    //        //tilesOrigin: 39.1622186743878 + "," + 39.9996233923096
    //        TRANSPARENT: 'true',
    //        REQUEST: 'getmap',
    //        SERVICE: 'animate',
    //        VERSION: '1.1.1',
    //        aparam: 'time',
    //        avalues: '2000-02-26,2000-03-05,2000-03-13,2000-03-21,2000-03-29' //atimes
    //    },
    //    serverType: 'geoserver'
    //});
    //var Layer_Animator = new ol.layer.Image({
    //    source: Source_Animator
    //});
    //Layer_Animator.set('name', 'Animator');
    //Layer_Animator.setOpacity(0.80);

    var map = new ol.Map({
        target: 'map',
        controls: new ol.control.defaults({ attributionOptions: { collapsible: true } }).extend([
            new ol.control.ScaleLine()
        ]),
        layers: [
            Layer_Base,
            Layer_MODIS,
            //Layer_Animator,
            Layer_WMA,
            Layer_Select,
            Layer_Measure],
        view: new ol.View({
            //projection: 'EPSG:4326',
            center: ol.proj.fromLonLat([66.902, 48.714]),
            //center: [0, 0],
            zoom: 5,
            maxZoom: 10
        })
    });

    map.on('pointermove', pointerMoveHandler);
    map.getViewport().addEventListener('mouseout', function () {
        helpTooltipElement.classList.add('hidden');
    });
    var typeSelect = document.getElementById('type');
    var draw;
    var formatLength = function (line) {
        var length = ol.sphere.getLength(line);
        var output;
        if (length > 100) {
            output = (Math.round(length / 1000 * 100) / 100) +
                ' ' + 'км';
        } else {
            output = (Math.round(length * 100) / 100) +
                ' ' + 'м';
        }
        return output;
    };
    var formatArea = function (polygon) {
        var area = ol.sphere.getArea(polygon);
        var output;
        if (area > 10000) {
            output = (Math.round(area / 1000000 * 100) / 100) +
                ' ' + 'км<sup>2</sup>';
        } else {
            output = (Math.round(area * 100) / 100) +
                ' ' + 'м<sup>2</sup>';
        }
        return output;
    };
    function addInteraction() {
        var type = (typeSelect.value == 'area' ? 'Polygon' : 'LineString');
        draw = new ol.interaction.Draw({
            source: Source_Measure,
            type: type,
            style: new ol.style.Style({
                fill: new ol.style.Fill({
                    color: 'rgba(255, 255, 255, 0.2)'
                }),
                stroke: new ol.style.Stroke({
                    color: 'rgba(0, 0, 0, 0.5)',
                    lineDash: [10, 10],
                    width: 2
                }),
                image: new ol.style.Circle({
                    radius: 5,
                    stroke: new ol.style.Stroke({
                        color: 'rgba(0, 0, 0, 0.7)'
                    }),
                    fill: new ol.style.Fill({
                        color: 'rgba(255, 255, 255, 0.2)'
                    })
                })
            })
        });
        map.addInteraction(draw);

        createMeasureTooltip();
        createHelpTooltip();

        var listener;
        draw.on('drawstart', function (evt) {
            // set sketch
            sketch = evt.feature;
            var tooltipCoord = evt.coordinate;

            listener = sketch.getGeometry().on('change', function (evt) {
                var geom = evt.target;
                var output;
                if (geom instanceof ol.geom.Polygon) {
                    output = formatArea(geom);
                    tooltipCoord = geom.getInteriorPoint().getCoordinates();
                } else if (geom instanceof ol.geom.LineString) {
                    output = formatLength(geom);
                    tooltipCoord = geom.getLastCoordinate();
                }
                measureTooltipElement.innerHTML = output;
                measureTooltip.setPosition(tooltipCoord);
            });
        });

        draw.on('drawend', function () {
            measureTooltipElement.className = 'ol-tooltip ol-tooltip-static';
            measureTooltip.setOffset([0, -7]);
            // unset sketch
            sketch = null;
            // unset tooltip so that a new one can be created
            measureTooltipElement = null;
            createMeasureTooltip();
            ol.Observable.unByKey(listener);
        });
    }
    function createHelpTooltip() {
        if (helpTooltipElement) {
            helpTooltipElement.parentNode.removeChild(helpTooltipElement);
        }
        helpTooltipElement = document.createElement('div');
        helpTooltipElement.className = 'ol-tooltip hidden';
        helpTooltip = new ol.Overlay({
            element: helpTooltipElement,
            offset: [15, 0],
            positioning: 'center-left'
        });
        map.addOverlay(helpTooltip);
    }
    function createMeasureTooltip() {
        if (measureTooltipElement) {
            measureTooltipElement.parentNode.removeChild(measureTooltipElement);
        }
        measureTooltipElement = document.createElement('div');
        measureTooltipElement.className = 'ol-tooltip ol-tooltip-measure';
        measureTooltip = new ol.Overlay({
            element: measureTooltipElement,
            offset: [0, -15],
            positioning: 'bottom-center'
        });
        map.addOverlay(measureTooltip);
    }
    typeSelect.onchange = function () {
        map.removeInteraction(draw);
        addInteraction();
    };
    addInteraction();
</script>


@* Menu *@
<script>
    jQuery(document).ready(function () {
        /*
            Sidebar
        */
        $('.dismiss, .overlay').on('click', function () {
            $('.sidebar').removeClass('active');
            $('.overlay').removeClass('active');
        });

        $('.open-menu').on('click', function (e) {
            e.preventDefault();
            $('.sidebar').addClass('active');
            // close opened sub-menus
            $('.collapse.show').toggleClass('show');
            $('a[aria-expanded=true]').attr('aria-expanded', 'false');
        });
        /* change sidebar style */
        $('a.btn-customized-dark').on('click', function (e) {
            e.preventDefault();
            $('.sidebar').removeClass('light');
        });
        $('a.btn-customized-light').on('click', function (e) {
            e.preventDefault();
            $('.sidebar').addClass('light');
        });
    });
</script>

@*tooltips, modal windows*@
<script>
    $(document).ready(function () {
        // Map Title
        new jBox('Modal', {
            id: 'modal-maptitle',
            attach: '#MapTitleBtn',
            width: 260,
            blockScroll: false,
            animation: 'flip',
            closeButton: false,
            position: {
                x: 'right',
                y: 'top'
            },
            offset: {
                x: -10,
                y: 70
            },
            content: '<div class="card-body text-white text-center p-0"><h4 class="card-title">Satellite</h5><p class="card-text mb-1">Dataset</p><p class="card-text">YYYY. JDay: DD/MM - DD/MM</p></div >',
            overlay: false,
            repositionOnOpen: false
        }).open();
        // Tooltip below to the right
        new jBox('Tooltip', {
            theme: 'TooltipDark',
            zIndex: 'auto',
            attach: '.SomeInfo',
            getTitle: 'InfoTitle',
            position: {
                x: 'right',
                y: 'center'
            },
            outside: 'x' // Horizontal Tooltips need to change their outside position
        });

    });
</script>